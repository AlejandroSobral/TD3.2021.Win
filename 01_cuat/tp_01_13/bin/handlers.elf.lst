     1                                  SECTION .ISR_AND_KEYBOARD
     2                                  
     3                                  %include "inc/defines.h" 
     1                              <1> 
     2                              <1> %define PORT_A_8042    0x60
     3                              <1> %define CTRL_PORT_8042 0x64
     4                              <1> %define KEYB_DIS       0xAD
     5                              <1> %define KEYB_EN        0xAE
     6                              <1> %define READ_OUT_8042  0xD0
     7                              <1> %define WRITE_OUT_8042 0xD1
     8                              <1> 
     9                              <1> 
    10                              <1> %define _KEY_1     0x02
    11                              <1> %define _KEY_2     0x03
    12                              <1> %define _KEY_3     0x04
    13                              <1> %define _KEY_4     0x05
    14                              <1> %define _KEY_5     0x06
    15                              <1> %define _KEY_6     0x07
    16                              <1> %define _KEY_7     0x08
    17                              <1> %define _KEY_8     0x09
    18                              <1> %define _KEY_9     0x0A
    19                              <1> %define _KEY_0     0x0B
    20                              <1> 
    21                              <1> %define _KEY_ENTER 0x1C
    22                              <1> 
    23                              <1> %define _KEY_A     0x1E
    24                              <1> %define _KEY_B     0x30
    25                              <1> %define _KEY_C     0x2E
    26                              <1> %define _KEY_D     0x20
    27                              <1> %define _KEY_E     0x12
    28                              <1> %define _KEY_F     0x21
    29                              <1> %define _KEY_G     0x22
    30                              <1> %define _KEY_H     0x23
    31                              <1> %define _KEY_I     0x17
    32                              <1> %define _KEY_J     0x24
    33                              <1> %define _KEY_K     0x25
    34                              <1> %define _KEY_L     0x26
    35                              <1> %define _KEY_M     0x32
    36                              <1> %define _KEY_N     0x31
    37                              <1> %define _KEY_O     0x18
    38                              <1> %define _KEY_P     0x19
    39                              <1> %define _KEY_Q     0x10
    40                              <1> %define _KEY_R     0x13
    41                              <1> %define _KEY_S     0x1F
    42                              <1> %define _KEY_T     0x14
    43                              <1> %define _KEY_U     0x16
    44                              <1> %define _KEY_V     0x2F
    45                              <1> %define _KEY_W     0x11
    46                              <1> %define _KEY_X     0x2D
    47                              <1> %define _KEY_Y     0x15
    48                              <1> %define _KEY_Z     0x2C
    49                              <1> 
    50                              <1> SYS_CALL_HALT     EQU     0
    51                              <1> SYS_CALL_READ     EQU     1
    52                              <1> SYS_CALL_WRITE    EQU     2
    53                              <1> SYS_CALL_SCREEN   EQU     3
    54                              <1> 
    55                              <1>  
     4                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ;/* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ;/* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ;/* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ;/* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ;/* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ;/* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ;/* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ;/* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ;/* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ;/* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ;/* PaGine*/
    12                              <1> 
    13                              <1> %define IDLE            0x00000000;
    14                              <1> %define WAITING         0x00000001;
    15                              <1> %define RUNNING         0x00000002;
     5                                  
     6                                  EXTERN __Keyboard_Buffer_func
     7                                  EXTERN KEYBOARD_BUFFER_ITSELF
     8                                  EXTERN Load_KeyBoardTable
     9                                  EXTERN DIGIT_TABLE_ITSELF
    10                                  EXTERN KEYBOARD_COUNTER
    11                                  EXTERN PF_ERROR_CODE
    12                                  EXTERN Screen_Writing_string
    13                                  EXTERN __PAGE_FAULT_PHY
    14                                  EXTERN Basic_Scheduler
    15                                  EXTERN __MMX_TASK2
    16                                  EXTERN __MMX_TASK3
    17                                  EXTERN SCH_ACTUAL_TASK
    18                                  EXTERN SCREEN_WRITING
    19                                  Key_times_to_load EQU 16
    20                                  
    21                                  PAG_PCD_YES equ 1       ; Cached                         
    22                                  PAG_PCD_NO  equ 0       ; No-cached
    23                                  PAG_PWT_YES equ 1       ; 1 to be write on Cache & Ram   
    24                                  PAG_PWT_NO  equ 0       ; 0 
    25                                  PAG_P_YES   equ 1       ; 1 Present
    26                                  PAG_P_NO    equ 0       ; 0 No presente
    27                                  PAG_RW_W    equ 1       ; 1 Read_Write
    28                                  PAG_RW_R    equ 0       ; 0 Read only
    29                                  PAG_US_SUP  equ 0       ; 0 Supervisor
    30                                  PAG_US_US   equ 1       ; 1 User  
    31                                  PAG_D       equ 0       ; Modify at page
    32                                  PAG_PAT     equ 0       ; PAT                   
    33                                  PAG_G_YES   equ 0       ; Global                 
    34                                  PAG_A       equ 0       ; Accesed
    35                                  PAG_PS_4K   equ 0       ; 4KB as PageSize
    36                                  
    37                                  GLOBAL EXCEPTION_DE     ; 0
    38                                  GLOBAL EXCEPTION_DB     ; 1
    39                                  GLOBAL EXCEPTION_NMI    ; 2
    40                                  GLOBAL EXCEPTION_BE     ; 3
    41                                  GLOBAL EXCEPTION_OF     ; 4
    42                                  GLOBAL EXCEPTION_BR     ; 5
    43                                  GLOBAL EXCEPTION_UD     ; 6
    44                                  GLOBAL EXCEPTION_NM     ; 7
    45                                  GLOBAL EXCEPTION_DF     ; 8
    46                                  GLOBAL EXCEPTION_CoS    ; 9
    47                                  GLOBAL EXCEPTION_TS     ; 10
    48                                  GLOBAL EXCEPTION_NP     ; 11
    49                                  GLOBAL EXCEPTION_SS     ; 12
    50                                  GLOBAL EXCEPTION_GP     ; 13
    51                                  GLOBAL EXCEPTION_PF     ; 14
    52                                  GLOBAL EXCEPTION_MF     ; 16
    53                                  GLOBAL EXCEPTION_AC     ; 17
    54                                  GLOBAL EXCEPTION_MC     ; 18
    55                                  GLOBAL EXCEPTION_XM     ; 19
    56                                  GLOBAL SYS_CALL_L       ; 80
    57                                  GLOBAL IRQ00__Key_Handler
    58                                  GLOBAL IRQ01__TIMER0
    59                                  GLOBAL Timer_END_L
    60                                  
    61                                  EXTERN __SYS_TABLES_IDT
    62                                  EXTERN __SYS_TABLES_GDT
    63                                  EXTERN DS_SEL
    64                                  EXTERN IDT_handler_loader
    65                                  EXTERN CS_SEL_32
    66                                  EXTERN TIMER_COUNTER
    67                                  EXTERN PF_VMA_ADDR
    68                                  EXTERN __screen_writing_pf
    69                                  EXTERN SCREEN_POINTER
    70                                  EXTERN __PAGE_TABLES_PHY
    71                                  EXTERN Basic_Scheduler
    72                                  EXTERN buffer_Clear
    73                                  
    74                                  EXTERN __load_DTP_entry
    75                                  EXTERN __load_TP_entry
    76                                  
    77                                  TASK2 EQU 2
    78                                  TASK3 EQU 3
    79                                  
    80                                  %define PORT_A_8042    0x60
    81                                  %define WRITE_OUT_8042 0xD1
    82                                  
    83                                  EXCEPTION_DE:                   ; Divide Error Exception
    84 00000000 B800000000                  mov eax, 0x00
    85 00000005 89C2                        mov edx, eax
    86 00000007 6687DB                      xchg bx,bx
    87 0000000A F4                          hlt
    88 0000000B EBF3                        jmp EXCEPTION_DE
    89 0000000D C3                          ret
    90                                  
    91                                  EXCEPTION_DB:                   ; Debug Exception
    92 0000000E B801000000                  mov eax, 0x01
    93 00000013 89C2                        mov edx, eax
    94 00000015 6687DB                      xchg bx,bx
    95 00000018 F4                          hlt
    96 00000019 EBF3                        jmp EXCEPTION_DB
    97 0000001B C3                          ret
    98                                  
    99                                  EXCEPTION_NMI:                  ; Non maskable interrupt
   100 0000001C B802000000                  mov eax, 0x02
   101 00000021 89C2                        mov edx, eax
   102 00000023 6687DB                      xchg bx,bx
   103 00000026 F4                          hlt
   104 00000027 EBF3                        jmp EXCEPTION_NMI
   105 00000029 C3                          ret
   106                                  
   107                                  EXCEPTION_BE:                   ; Breakpoint Exception
   108 0000002A B803000000                  mov eax, 0x03
   109 0000002F 89C2                        mov edx, eax
   110 00000031 6687DB                      xchg bx,bx
   111 00000034 F4                          hlt
   112 00000035 EBF3                        jmp EXCEPTION_BE
   113 00000037 C3                          ret
   114                                  
   115                                  EXCEPTION_OF:                   ; Overflow Exception
   116 00000038 B804000000                  mov eax, 0x04
   117 0000003D 89C2                        mov edx, eax
   118 0000003F 6687DB                      xchg bx,bx
   119 00000042 F4                          hlt
   120 00000043 EBF3                        jmp EXCEPTION_OF
   121 00000045 C3                          ret
   122                                  
   123                                  EXCEPTION_BR:                   ; Bound Range Exception
   124 00000046 B805000000                  mov eax, 0x05
   125 0000004B 89C2                        mov edx, eax
   126 0000004D 6687DB                      xchg bx,bx
   127 00000050 F4                          hlt
   128 00000051 EBF3                        jmp EXCEPTION_BR
   129 00000053 C3                          ret
   130                                  
   131                                  EXCEPTION_UD:                   ; Invalid Opcode Exception
   132 00000054 B806000000                  mov eax, 0x06
   133 00000059 89C2                        mov edx, eax
   134 0000005B 6687DB                      xchg bx,bx
   135 0000005E F4                          hlt
   136 0000005F EBF3                        jmp EXCEPTION_UD
   137 00000061 C3                          ret
   138                                  
   139                                  EXCEPTION_NM:                   ; Device Not Available Exception
   140                                  
   141 00000062 60                          PUSHAD
   142 00000063 B807000000                  mov eax, 0x07
   143 00000068 0F06                        clts        
   144 0000006A 803D[00000000]02            cmp byte [SCH_ACTUAL_TASK], TASK2
   145 00000071 740B                        je LOAD_CONTEXT_TASK2
   146                                  
   147 00000073 803D[00000000]03            cmp byte [SCH_ACTUAL_TASK], TASK3
   148 0000007A 740C                        je LOAD_CONTEXT_TASK3
   149                                  
   150 0000007C EB12                        jmp END_NM_ITR
   151                                  
   152                                  LOAD_CONTEXT_TASK2:
   153 0000007E B8[00000000]                mov eax, __MMX_TASK2
   154 00000083 0FAE08                      FXRSTOR [eax]
   155 00000086 EB08                        jmp END_NM_ITR
   156                                  
   157                                  LOAD_CONTEXT_TASK3:
   158 00000088 B8[00000000]                mov eax, __MMX_TASK3
   159 0000008D 0FAE08                      FXRSTOR [eax]
   160                                  
   161                                  END_NM_ITR:
   162 00000090 61                          POPAD
   163 00000091 CF                          iret
   164                                  
   165                                  
   166                                  EXCEPTION_DF:                   ; Double Fault Exception
   167 00000092 B808000000                  mov eax, 0x08
   168 00000097 89C2                        mov edx, eax
   169 00000099 6687DB                      xchg bx,bx
   170 0000009C F4                          hlt
   171 0000009D EBF3                        jmp EXCEPTION_DF
   172 0000009F C3                          ret
   173                                  
   174                                  EXCEPTION_CoS:                   ; Coprocessor Segment Overrun Exception
   175 000000A0 B809000000                  mov eax, 0x09
   176 000000A5 89C2                        mov edx, eax
   177 000000A7 6687DB                      xchg bx,bx
   178 000000AA F4                          hlt
   179 000000AB EBF3                        jmp EXCEPTION_CoS
   180 000000AD C3                          ret
   181                                  
   182                                  EXCEPTION_TS:                   ; Invalid TSS Exception
   183 000000AE B80A000000                  mov eax, 0x0A
   184 000000B3 89C2                        mov edx, eax
   185 000000B5 6687DB                      xchg bx,bx
   186 000000B8 F4                          hlt
   187 000000B9 EBF3                        jmp EXCEPTION_TS
   188 000000BB C3                          ret
   189                                  
   190                                  EXCEPTION_NP:                   ; No Present Segment Exception
   191 000000BC B80B000000                  mov eax, 0x0B
   192 000000C1 89C2                        mov edx, eax
   193 000000C3 6687DB                      xchg bx,bx
   194 000000C6 F4                          hlt
   195 000000C7 EBF3                        jmp EXCEPTION_NP
   196 000000C9 C3                          ret
   197                                  
   198                                  EXCEPTION_SS:                   ; Stack Fault Exception
   199 000000CA B80C000000                  mov eax, 0x0C
   200 000000CF 89C2                        mov edx, eax
   201 000000D1 6687DB                      xchg bx,bx
   202 000000D4 F4                          hlt
   203 000000D5 EBF3                        jmp EXCEPTION_SS
   204 000000D7 C3                          ret
   205                                  
   206                                  EXCEPTION_GP:                   ; General Protection Fault Exception
   207 000000D8 B80D000000                  mov eax, 0x0D
   208 000000DD 89C2                        mov edx, eax
   209 000000DF 6687DB                      xchg bx,bx
   210 000000E2 F4                          hlt
   211 000000E3 EBF3                        jmp EXCEPTION_GP
   212 000000E5 C3                          ret
   213                                  
   214                                  EXCEPTION_PF:                   ; Page Fault Exception
   215                                  
   216                                  
   217                                  ;https://xem.github.io/minix86/manual/intel-x86-and-64-manual-vol3/o_fe12b1e2a880e0ce-227.html
   218                                      ; CR2 content show the memory
   219                                      ; Bit0 -> Present -> 0 = Non-present page
   220                                      ; Bit0 -> Present -> 1 = Page-level protection violation
   221                                      ; Bit1 -> W/R     -> 0 = Access causing the fault was a read
   222                                      ; Bit1 -> W/R     -> 1 = Access causing the fault was a write
   223                                      ; Bit2 -> U/S     -> 0 = A Supervisor-mode access caused the fault
   224                                      ; Bit2 -> U/S     -> 1 = A User-mode access caused the fault
   225                                      ; Bit3 -> RSVD    -> 0 = Fault was not caused by reserved bit violation
   226                                      ; Bit4 -> RSVD    -> 1 = Fault was caused by a reserv bit set to 1 in some paging structure entry.
   227                                      ; Bit5 -> I/D     -> 0 = Fault not caused by an instruction fetch
   228                                      ; Bit5 -> I/D     -> 1 = Fault caused by an instruction fecth
   229 000000E6 FA                          cli                                ; Turn off interrputs
   230 000000E7 6687DB                      xchg bx,bx                    ;                                     
   231 000000EA 60                          pusha                              ; Store g.p. registers
   232 000000EB 0F20D0                      mov eax, cr2                       ;Store CR2 as requested
   233 000000EE A3[00000000]                mov [PF_VMA_ADDR], eax      ;Store linear addrs
   234 000000F3 8B5C2420                    mov ebx, [esp + 32]                ;Get error code
   235 000000F7 891D[00000000]              mov [PF_ERROR_CODE], ebx     ;Store error code
   236 000000FD 89D8                        mov eax, ebx; Compare PF_ERROR_CODE 
   237                                  
   238                                  
   239 000000FF 83E01F                      and eax, 0x1F       ;Mask to take B4-B0
   240 00000102 83F800                      cmp eax,0           ; Cmp according upper info          
   241 00000105 741B                        je PF_P             ; No present page                                   
   242 00000107 83F801                      cmp eax,1                
   243 0000010A 0F8486000000                je PF_RW                                        
   244 00000110 83F802                      cmp eax,2           
   245 00000113 0F8491000000                je PF_US                                    
   246 00000119 83F804                      cmp eax,4                                      
   247 0000011C 0F849C000000                je PF_ID
   248                                  PF_P:
   249                                  
   250 00000122 55                          push ebp
   251 00000123 89E5                        mov ebp,esp
   252 00000125 FF35[00000000]              push dword [PF_ERROR_CODE] 
   253 0000012B E8(00000000)                call __screen_writing_pf
   254 00000130 C9                          leave
   255                                  
   256                                      ; Here I should set paging off, and load the no-paged add
   257                                  
   258                                  
   259 00000131 0F20C0                      mov  eax, cr0 
   260 00000134 25FFFFFF7F                  and  eax, (X86_CR0_PG - 1) 
   261 00000139 0F22C0                      mov  cr0, eax  
   262                                  
   263                                  
   264                                  
   265                                      ; -> Load DTP (Page Table Entry)
   266 0000013C 55                          push    ebp
   267 0000013D 89E5                        mov     ebp, esp
   268 0000013F 6A01                        push    PAG_P_YES                           ; Present. P = 1 on memory. P=0, out of mem.
   269 00000141 6A01                        push    PAG_RW_W                            ; Readable / Writable: RO = 0; W = 1;
   270 00000143 6A00                        push    PAG_US_SUP                          ; User / Supervisor: Set page privileges, Kernel = 0; User = 1
   271 00000145 6A00                        push    PAG_PWT_NO                          ; Page-Level Write Through. Cache writing mode
   272 00000147 6A00                        push    PAG_PCD_NO                          ; Page-Level Cache Disable. Set page into non-cached memory.
   273 00000149 6A00                        push    PAG_A                               ; Accesed. To be write each time page is used.
   274 0000014B 6A00                        push    PAG_PS_4K                           ; Page Size: Set 0 for 4kB page, 1 for 4 Mb
   275 0000014D FF35[00000000]              push    dword[PF_VMA_ADDR]                       ; VMA Adds
   276 00000153 68[00000000]                push    dword(__PAGE_TABLES_PHY)            ; Start itself
   277 00000158 E8(00000000)                call    __load_DTP_entry
   278 0000015D C9                          leave
   279                                  
   280                                  
   281                                  
   282                                      ; -> Load (Page Table Entry)
   283 0000015E 55                          push    ebp
   284 0000015F 89E5                        mov     ebp, esp
   285 00000161 6A01                        push    PAG_P_YES
   286 00000163 6A01                        push    PAG_RW_W
   287 00000165 6A00                        push    PAG_US_SUP
   288 00000167 6A00                        push    PAG_PWT_NO
   289 00000169 6A00                        push    PAG_PCD_NO
   290 0000016B 6A00                        push    PAG_A
   291 0000016D 6A00                        push    PAG_D
   292 0000016F 6A00                        push    PAG_PAT
   293 00000171 6A00                        push    PAG_G_YES
   294 00000173 68000000A0                  push    dword(0xA0000000) ;Phy where is indicated to page. No used any more.
   295 00000178 FF35[00000000]              push    dword[PF_VMA_ADDR]  ;VMA've cause the pF
   296 0000017E 68[00000000]                push    dword(__PAGE_TABLES_PHY) ;TP Init, After DTP 
   297 00000183 E8(00000000)                call    __load_TP_entry
   298 00000188 C9                          leave
   299                                  
   300                                      ; Paging turn on
   301 00000189 0F20C0                      mov   eax, cr0 
   302 0000018C 0D00000080                  or    eax, X86_CR0_PG
   303 00000191 0F22C0                      mov   cr0, eax  
   304                                  
   305 00000194 EB3C                        jmp END_PF
   306                                      
   307                                  PF_RW:
   308 00000196 55                          push ebp
   309 00000197 89E5                        mov ebp,esp
   310 00000199 FF35[00000000]              push dword [PF_ERROR_CODE]   
   311 0000019F E8(00000000)                call __screen_writing_pf
   312 000001A4 C9                          leave
   313 000001A5 6687DB                      xchg bx,bx    
   314                                  
   315                                  
   316                                  
   317 000001A8 EB28                        jmp END_PF
   318                                      
   319                                  PF_US:
   320                                  
   321 000001AA 55                          push ebp
   322 000001AB 89E5                        mov ebp,esp
   323 000001AD FF35[00000000]              push dword [PF_ERROR_CODE]  
   324 000001B3 E8(00000000)                call __screen_writing_pf
   325 000001B8 C9                          leave
   326 000001B9 6687DB                      xchg bx,bx
   327 000001BC EB14                        jmp END_PF
   328                                      
   329                                  PF_ID:
   330 000001BE 6687DB                      xchg bx,bx
   331 000001C1 55                          push ebp
   332 000001C2 89E5                        mov ebp,esp
   333 000001C4 FF35[00000000]              push dword [PF_ERROR_CODE] 
   334 000001CA E8(00000000)                call __screen_writing_pf
   335 000001CF C9                          leave
   336 000001D0 EB00                        jmp END_PF
   337                                  
   338                                  
   339                                  
   340                                  END_PF:
   341                                      
   342 000001D2 B020                        MOV al, 0x20 ;Send END of interrupt to PIC
   343 000001D4 E620                        OUT 0x20, al
   344 000001D6 61                          POPAD ;Pop all general purp registers to stack
   345 000001D7 58                          pop eax
   346 000001D8 FB                          sti
   347 000001D9 CF                          iret     
   348                                      
   349                                  
   350                                  
   351                                  
   352                                  
   353                                  EXCEPTION_MF:                   ; FPU Floating Point Error Exception
   354 000001DA B810000000                  mov eax, 0x10
   355 000001DF 89C2                        mov edx, eax
   356 000001E1 6687DB                      xchg bx,bx
   357 000001E4 F4                          hlt
   358 000001E5 EBF3                        jmp EXCEPTION_MF
   359 000001E7 C3                          ret
   360                                  
   361                                  EXCEPTION_AC:                   ; Aligment Check Exception
   362 000001E8 B811000000                  mov eax, 0x11
   363 000001ED 89C2                        mov edx, eax
   364 000001EF 6687DB                      xchg bx,bx
   365 000001F2 F4                          hlt
   366 000001F3 EBF3                        jmp EXCEPTION_AC
   367 000001F5 C3                          ret
   368                                  
   369                                  EXCEPTION_MC:                   ; Machine Check Exception
   370 000001F6 B812000000                  mov eax, 0x12
   371 000001FB 89C2                        mov edx, eax
   372 000001FD 6687DB                      xchg bx,bx
   373 00000200 F4                          hlt
   374 00000201 EBF3                        jmp EXCEPTION_MC
   375 00000203 C3                          ret
   376                                  
   377                                  EXCEPTION_XM:                   ; SIMD Floating Point Exception
   378 00000204 B813000000                  mov eax, 0x13
   379 00000209 89C2                        mov edx, eax
   380 0000020B 6687DB                      xchg bx,bx
   381 0000020E F4                          hlt
   382 0000020F EBF3                        jmp EXCEPTION_XM
   383 00000211 C3                          ret
   384                                  
   385                                  IRQ00__Key_Handler:                   ; Keyboard IRQ Handler
   386                                  
   387 00000212 60                          PUSHAD ; Push all general purp registers to stack
   388 00000213 E460                        in al, PORT_A_8042 ; Read key buffer
   389 00000215 88C3                        mov bl, al      ; Store al value
   390 00000217 20C0                        and al, al ; Compare signal between al & al
   391 00000219 0F8853010000                JS End_Keyboard ;If the key was released, nothing to do
   392                                  
   393 0000021F 8B0D[00000000]              mov dword ecx, [KEYBOARD_COUNTER]
   394 00000225 41                          inc ecx
   395 00000226 890D[00000000]              mov dword [KEYBOARD_COUNTER], ecx ; Store the KEYBOARD_COUNTER
   396 0000022C 6683F910                    cmp cx, Key_times_to_load; #Compare with 17
   397                                  
   398 00000230 0F8412010000                JE Buffer_full;
   399                                  
   400 00000236 80FB0B                      cmp bl, _KEY_0
   401 00000239 7457                        je K_0
   402                                  
   403 0000023B 80FB02                      cmp bl, _KEY_1
   404 0000023E 7466                        je K_1
   405                                  
   406 00000240 80FB03                      cmp bl, _KEY_2
   407 00000243 7475                        je K_2
   408                                  
   409 00000245 80FB04                      cmp bl, _KEY_3
   410 00000248 0F8480000000                je K_3
   411                                  
   412 0000024E 80FB05                      cmp bl, _KEY_4
   413 00000251 0F848B000000                je K_4
   414                                  
   415 00000257 80FB06                      cmp bl, _KEY_5
   416 0000025A 0F8493000000                je K_5
   417                                  
   418 00000260 80FB07                      cmp bl, _KEY_6
   419 00000263 0F849B000000                je K_6
   420                                  
   421 00000269 80FB08                      cmp bl, _KEY_7
   422 0000026C 0F84A3000000                je K_7
   423                                  
   424 00000272 80FB09                      cmp bl, _KEY_8
   425 00000275 0F84AB000000                je K_8
   426                                  
   427 0000027B 80FB0A                      cmp bl, _KEY_9
   428 0000027E 0F84B3000000                je K_9 
   429                                  
   430 00000284 80FB1C                      cmp bl, _KEY_ENTER
   431 00000287 0F84C7000000                je K_ENTER 
   432                                  
   433                                      
   434                                  
   435 0000028D E9E0000000                  jmp End_Keyboard ; Any other key should be ignored.
   436                                  
   437                                  
   438                                  
   439                                  
   440                                  K_0:   ; Process any value key mean to set offset for each value..
   441                                          ; Instead, create a one-on-one label for each key..Love u assm
   442 00000292 6A00                        push 0x00
   443 00000294 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   444 00000299 E8(00000000)                call __Keyboard_Buffer_func
   445 0000029E 83C408                      add esp,8; 
   446 000002A1 E9CC000000                  jmp End_Keyboard
   447                                  
   448                                  K_1:   
   449                                      ;xchg bx, bx
   450 000002A6 6A01                        push 0x01
   451 000002A8 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   452 000002AD E8(00000000)                call __Keyboard_Buffer_func
   453 000002B2 83C408                      add esp,8;
   454 000002B5 E9B8000000                  jmp End_Keyboard
   455                                  
   456                                  K_2:   
   457                                      
   458 000002BA 6A02                        push 0x02
   459 000002BC 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   460 000002C1 E8(00000000)                call __Keyboard_Buffer_func
   461 000002C6 83C408                      add esp,8; 
   462 000002C9 E9A4000000                  jmp End_Keyboard
   463                                  
   464                                  K_3:   
   465                                      
   466 000002CE 6A03                        push 0x03
   467 000002D0 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   468 000002D5 E8(00000000)                call __Keyboard_Buffer_func
   469 000002DA 83C408                      add esp,8; 
   470 000002DD E990000000                  jmp End_Keyboard
   471                                  
   472                                  K_4:   
   473                                      
   474 000002E2 6A04                        push 0x04
   475 000002E4 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   476 000002E9 E8(00000000)                call __Keyboard_Buffer_func
   477 000002EE 83C408                      add esp,8;
   478 000002F1 EB7F                        jmp End_Keyboard
   479                                  
   480                                  K_5:   
   481                                      
   482 000002F3 6A05                        push 0x05
   483 000002F5 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   484 000002FA E8(00000000)                call __Keyboard_Buffer_func
   485 000002FF 83C408                      add esp,8; 
   486 00000302 EB6E                        jmp End_Keyboard
   487                                      
   488                                  K_6:   
   489 00000304 6A06                        push 0x06
   490 00000306 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   491 0000030B E8(00000000)                call __Keyboard_Buffer_func
   492 00000310 83C408                      add esp,8; 
   493 00000313 EB5D                        jmp End_Keyboard
   494                                  
   495                                  K_7:   
   496                                      
   497 00000315 6A07                        push 0x07
   498 00000317 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   499 0000031C E8(00000000)                call __Keyboard_Buffer_func
   500 00000321 83C408                      add esp,8; 
   501 00000324 EB4C                        jmp End_Keyboard
   502                                  
   503                                  K_8:   
   504                                      
   505 00000326 6A08                        push 0x08
   506 00000328 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   507 0000032D E8(00000000)                call __Keyboard_Buffer_func
   508 00000332 83C408                      add esp,8; 
   509                                      
   510 00000335 EB3B                        jmp End_Keyboard  
   511                                  K_9:   
   512                                  
   513 00000337 6A09                        push 0x09
   514 00000339 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   515 0000033E E8(00000000)                call __Keyboard_Buffer_func
   516 00000343 83C408                      add esp,8; 
   517                                      
   518 00000346 EB2A                        jmp End_Keyboard      
   519                                  
   520                                  
   521                                  Buffer_full: 
   522                                  ; If 17 key were pressed, reset the counter and load the data
   523                                      ;mov dword eax, [KEYBOARD_COUNTER]
   524                                      ;mov eax, 0
   525 00000348 C705[00000000]0000-         mov dword [KEYBOARD_COUNTER], 0 ; Store the KEYBOARD_COUNTER
   525 00000350 0000               
   526 00000352 EB0A                        jmp K_ENTER_2;
   527                                  
   528                                  
   529                                  K_ENTER:   ; Process enter key
   530 00000354 C705[00000000]0000-         mov dword [KEYBOARD_COUNTER], 0 ; Reset the keyboard counter
   530 0000035C 0000               
   531                                  
   532                                  K_ENTER_2:    
   533                                  
   534 0000035E 68[00000000]                push dword KEYBOARD_BUFFER_ITSELF
   535 00000363 68[00000000]                push dword DIGIT_TABLE_ITSELF
   536 00000368 E8(00000000)                call Load_KeyBoardTable
   537 0000036D 83C408                      add esp,8
   538                                  
   539 00000370 EB00                        jmp End_Keyboard
   540                                  
   541                                  End_Keyboard:
   542 00000372 B020                        MOV al, 0x20 ;Send END of interrupt to PIC
   543 00000374 E620                        OUT 0x20, al
   544 00000376 61                          POPAD ;Pop all general purp registers to stack
   545 00000377 CF                          iret     
   546                                      
   547                                  
   548                                  IRQ01__TIMER0:                       
   549 00000378 E9(00000000)                jmp Basic_Scheduler     ; Jump rather than calling for keep stack just the same
   550                                                 
   551                                      
   552                                  Timer_END_L:
   553 0000037D B020                        MOV al, 0x20                        
   554 0000037F E620                        OUT 0x20, al                              
   555 00000381 CF                          iret                                
   556                                  
   557                                  
   558                                  
   559                                  SYS_CALL_L:
   560                                  
   561 00000382 FB                          sti
   562 00000383 83F801                      cmp eax, SYS_CALL_READ
   563 00000386 740F                        je SYS_CALL_READ_L
   564                                  
   565 00000388 83F802                      cmp eax, SYS_CALL_WRITE
   566 0000038B 7411                        je SYS_CALL_WRITE_L
   567                                  
   568 0000038D 83F803                      cmp eax, SYS_CALL_SCREEN
   569 00000390 7416                        je SYS_CALL_SCREEN_L
   570                                  
   571 00000392 83F800                      cmp eax, SYS_CALL_HALT
   572 00000395 740E                        je SYS_CALL_HLT_L
   573                                  
   574                                  
   575                                  SYS_CALL_READ_L:
   576 00000397 8B06                        mov dword eax, [esi]
   577 00000399 8B5604                      mov dword edx, [esi + 4]            
   578 0000039C EB18                        jmp SYS_CALL_END
   579                                  
   580                                  
   581                                  SYS_CALL_WRITE_L:
   582 0000039E 890F                        mov dword [edi], ecx
   583 000003A0 895704                      mov dword [edi + 4], edx            
   584 000003A3 EB11                        jmp SYS_CALL_END
   585                                  
   586                                  SYS_CALL_HLT_L:
   587 000003A5 F4                          hlt
   588 000003A6 EBFD                        jmp SYS_CALL_HLT_L
   589                                  
   590                                  
   591                                  SYS_CALL_SCREEN_L:
   592 000003A8 51                          push ecx
   593 000003A9 52                          push edx    
   594 000003AA 57                          push edi
   595 000003AB 56                          push esi
   596 000003AC E8(00000000)                call SCREEN_WRITING ; 
   597 000003B1 83C410                      add esp,16
   598 000003B4 EB00                        jmp SYS_CALL_END
   599                                  
   600                                  SYS_CALL_END
   600          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   601 000003B6 B880000000                  mov eax, 0x80
   602 000003BB B020                        MOV al, 0x20                        
   603 000003BD E620                        OUT 0x20, al                              
   604 000003BF CF                          iret 
   605                                  
   606                                  
   607                                  
