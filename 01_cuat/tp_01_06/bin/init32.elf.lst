     1                                  USE32
     2                                  GLOBAL init32
     3                                  GLOBAL start32_launcher
     4                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ;/* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ;/* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ;/* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ;/* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ;/* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ;/* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ;/* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ;/* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ;/* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ;/* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ;/* PaGine*/
     5                                  
     6                                  SECTION .init32
     7                                  
     8                                  ;Load references
     9                                  EXTERN  DS_SEL
    10                                  EXTERN  __STACK_END_32
    11                                  EXTERN  __STACK_SIZE_32
    12                                  EXTERN  CS_SEL_32
    13                                  EXTERN  kernel32_init
    14                                  EXTERN  __KERNEL_32_LMA
    15                                  EXTERN  __codigo_kernel32_size
    16                                  EXTERN __ISR_AND_KEYBOARD_CODE_size; 
    17                                  EXTERN __ISR_AND_KEYBOARD_VMA;
    18                                  EXTERN __ISR_AND_KEYBOARD_LMA;_
    19                                  EXTERN  __fast_memcpy
    20                                  EXTERN  __fast_memcpy_rom
    21                                  EXTERN  kernel32_code_size
    22                                  EXTERN  __functions_size
    23                                  EXTERN  __FUNCTIONS_LMA
    24                                  EXTERN  __KERNEL_32_VMA
    25                                  EXTERN  __FUNCTIONS_VMA
    26                                  EXTERN __SYS_TABLES_GDT
    27                                  EXTERN __SYS_TABLES_LMA
    28                                  EXTERN  __sys_size
    29                                  
    30                                  ;JMP References
    31                                  EXTERN init_pic
    32                                  EXTERN init_IDT
    33                                  EXTERN init_timer0
    34                                  EXTERN _idtr
    35                                  KeyBoard_IRQ equ 0x01
    36                                  
    37                                   
    38                                  
    39                                  
    40                                  init32:
    41                                  start32_launcher:
    42                                  
    43                                      ;Selectors init
    44 00000000 66B8[0000]                  mov ax, DS_SEL
    45 00000004 8ED8                        mov ds, ax
    46 00000006 8EC0                        mov es, ax
    47 00000008 8EE8                        mov gs, ax
    48 0000000A 8EE0                        mov fs, ax
    49                                  
    50                                      ;Stack init
    51 0000000C 8ED0                        mov ss,ax
    52 0000000E BC[00000000]                mov esp,__STACK_END_32
    53 00000013 31C0                        xor eax,eax
    54                                  
    55                                      ;Clean Stack
    56 00000015 B9[00000000]                mov ecx,__STACK_SIZE_32   
    57                                      .stack_init:
    58 0000001A 50                              push eax
    59 0000001B E2FD                            loop .stack_init
    60 0000001D BC[00000000]                mov esp,__STACK_END_32
    61                                  
    62                                      ;Start copying from ROM -> RAM.
    63                                  
    64                                      ;Copy Functions functions
    65 00000022 55                          push ebp
    66 00000023 89E5                        mov ebp,esp
    67 00000025 68[00000000]                push __functions_size; 
    68 0000002A 68[00000000]                push __FUNCTIONS_VMA
    69 0000002F 68[00000000]                push __FUNCTIONS_LMA ; 
    70 00000034 E8(00000000)                call __fast_memcpy_rom
    71 00000039 C9                          leave
    72 0000003A 83F801                      cmp eax,1
    73 0000003D 7568                        jne .halteo
    74                                  
    75                                  
    76                                  
    77                                      ;Copy Kernel
    78 0000003F 55                          push ebp
    79 00000040 89E5                        mov ebp,esp
    80 00000042 68[00000000]                push __codigo_kernel32_size; 
    81 00000047 68[00000000]                push __KERNEL_32_VMA;
    82 0000004C 68[00000000]                push __KERNEL_32_LMA;
    83 00000051 E8(00000000)                call __fast_memcpy_rom
    84 00000056 C9                          leave
    85 00000057 83F801                      cmp eax,1
    86 0000005A 754B                        jne .halteo
    87                                  
    88                                      ;ISR & KEYBOARD Codes
    89 0000005C 55                          push ebp
    90 0000005D 89E5                        mov ebp,esp
    91 0000005F 68[00000000]                push __ISR_AND_KEYBOARD_CODE_size; 
    92 00000064 68[00000000]                push __ISR_AND_KEYBOARD_VMA;
    93 00000069 68[00000000]                push __ISR_AND_KEYBOARD_LMA;_
    94 0000006E E8(00000000)                call __fast_memcpy
    95 00000073 C9                          leave
    96 00000074 83F801                      cmp eax,1
    97 00000077 752E                        jne .halteo
    98                                      
    99 00000079 55                          push ebp
   100 0000007A 89E5                        mov ebp,esp
   101 0000007C 68[00000000]                push  __sys_size; 
   102 00000081 68[00000000]                push __SYS_TABLES_GDT;
   103 00000086 68[00000000]                push __SYS_TABLES_LMA ;
   104 0000008B E8(00000000)                call __fast_memcpy
   105 00000090 C9                          leave
   106 00000091 83F801                      cmp eax,1
   107 00000094 7511                        jne .halteo
   108                                  
   109 00000096 E8(00000000)                call init_pic ; PIC Init
   110 0000009B E8(00000000)                call init_IDT;  IDT Init
   111                                      
   112 000000A0 EA[00000000][0000]          jmp CS_SEL_32:kernel32_init
   113                                  
   114                                  
   115                                  .halteo
   115          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   116 000000A7 F4                          hlt
   117 000000A8 EBFD                        jmp .halteo
