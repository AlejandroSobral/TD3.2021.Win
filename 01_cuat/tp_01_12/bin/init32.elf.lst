     1                                  USE32
     2                                  GLOBAL init32
     3                                  GLOBAL start32_launcher
     4                                  GLOBAL turn_on_paging
     5                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ;/* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ;/* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ;/* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ;/* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ;/* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ;/* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ;/* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ;/* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ;/* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ;/* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ;/* PaGine*/
    12                              <1> 
    13                              <1> %define IDLE            0x00000000;
    14                              <1> %define WAITING         0x00000001;
    15                              <1> %define RUNNING         0x00000002;
     6                                  
     7                                  SECTION .init32
     8                                  
     9                                  ;Load references
    10                                  EXTERN  DS_SEL
    11                                  EXTERN __FUNCTIONS_PHY
    12                                  EXTERN __TASK_1_BSS_PHY
    13                                  EXTERN __TASK_1_DATA_PHY
    14                                  EXTERN __TASK_1_RODATA_PHY
    15                                  EXTERN __TASK_1_TEXT_PHY
    16                                  EXTERN __TASK_4_BSS_PHY
    17                                  EXTERN __TASK_4_DATA_PHY
    18                                  EXTERN __TASK_4_RODATA_PHY
    19                                  EXTERN __TASK_4_TEXT_PHY
    20                                  EXTERN __TASK_2_BSS_PHY
    21                                  EXTERN __TASK_2_DATA_PHY
    22                                  EXTERN __TASK_2_RODATA_PHY
    23                                  EXTERN __TASK_2_TEXT_PHY
    24                                  EXTERN __TASK_3_BSS_PHY
    25                                  EXTERN __TASK_3_DATA_PHY
    26                                  EXTERN __TASK_3_RODATA_PHY
    27                                  EXTERN __TASK_3_TEXT_PHY
    28                                  EXTERN __DATA_PHY
    29                                  EXTERN __KERNEL_32_PHY
    30                                  EXTERN __ISR_AND_KEYBOARD_PHY
    31                                  EXTERN __SYS_TABLES_PHY
    32                                  EXTERN  __STACK_END_32
    33                                  EXTERN  __STACK_SIZE_32
    34                                  EXTERN  CS_SEL_32
    35                                  EXTERN  kernel32_init
    36                                  EXTERN  __KERNEL_32_LMA
    37                                  EXTERN  __codigo_KERNEL32_size
    38                                  EXTERN __ISR_AND_KEYBOARD_CODE_size; 
    39                                  EXTERN __ISR_AND_KEYBOARD_VMA;
    40                                  EXTERN __ISR_AND_KEYBOARD_LMA;_
    41                                  EXTERN  __fast_memcpy
    42                                  EXTERN  __fast_memcpy_rom
    43                                  EXTERN __DATA__size
    44                                  EXTERN  kernel32_code_size
    45                                  EXTERN  __functions_size
    46                                  EXTERN TASK_1_rodata_size
    47                                  EXTERN TASK_1_data_size
    48                                  EXTERN TASK_1_bss_size
    49                                  EXTERN TASK_1_TEXT_size
    50                                  EXTERN TASK_2_rodata_size
    51                                  EXTERN TASK_2_data_size
    52                                  EXTERN TASK_2_bss_size
    53                                  EXTERN TASK_2_TEXT_size
    54                                  EXTERN TASK_3_rodata_size
    55                                  EXTERN TASK_3_data_size
    56                                  EXTERN TASK_3_bss_size
    57                                  EXTERN TASK_3_TEXT_size
    58                                  EXTERN TASK_4_rodata_size
    59                                  EXTERN TASK_4_data_size
    60                                  EXTERN TASK_4_bss_size
    61                                  EXTERN TASK_4_TEXT_size
    62                                  EXTERN __TASK_1_DATA_LMA
    63                                  EXTERN __TASK_1_DATA_VMA
    64                                  EXTERN __TASK_1_RODATA_VMA
    65                                  EXTERN __TASK_1_RODATA_LMA
    66                                  EXTERN __TASK_1_TEXT_LMA
    67                                  EXTERN __TASK_1_TEXT_VMA
    68                                  EXTERN __TASK_1_BSS_LMA
    69                                  EXTERN __TASK_1_BSS_VMA
    70                                  EXTERN __TASK_2_DATA_LMA
    71                                  EXTERN __TASK_2_RODATA_LMA
    72                                  EXTERN __TASK_2_TEXT_LMA
    73                                  EXTERN __TASK_2_TEXT_VMA
    74                                  EXTERN __TASK_2_BSS_LMA
    75                                  EXTERN __TASK_2_BSS_VMA
    76                                  EXTERN __TASK_3_DATA_LMA
    77                                  EXTERN __TASK_3_RODATA_LMA
    78                                  EXTERN __TASK_3_TEXT_LMA
    79                                  EXTERN __TASK_3_TEXT_VMA
    80                                  EXTERN __TASK_3_BSS_LMA
    81                                  EXTERN __TASK_3_BSS_VMA
    82                                  EXTERN __TASK_4_DATA_LMA
    83                                  EXTERN __TASK_4_DATA_VMA
    84                                  EXTERN __TASK_4_RODATA_VMA
    85                                  EXTERN __TASK_4_RODATA_LMA
    86                                  EXTERN __TASK_4_TEXT_LMA
    87                                  EXTERN __TASK_4_TEXT_VMA
    88                                  EXTERN __TASK_4_BSS_LMA
    89                                  EXTERN __TASK_4_BSS_VMA
    90                                  EXTERN  __FUNCTIONS_LMA
    91                                  EXTERN  __KERNEL_32_VMA
    92                                  EXTERN  __FUNCTIONS_VMA
    93                                  EXTERN __DATA_LMA
    94                                  EXTERN __DATA_VMA
    95                                  EXTERN __SYS_TABLES_GDT 
    96                                  EXTERN __SYS_TABLES_IDT
    97                                  EXTERN __SYS_TABLES_LMA
    98                                  EXTERN  __sys_tables_size
    99                                  EXTERN Screen_pointer
   100                                  
   101                                  ;JMP References
   102                                  EXTERN init_pic
   103                                  EXTERN init_IDT
   104                                  EXTERN init_timer0
   105                                  EXTERN load_tss
   106                                  
   107                                  
   108                                  EXTERN go_paging
   109                                  KeyBoard_IRQ equ 0x01
   110                                  VIDEO_BUFFER_ADDR EQU 0x000B8000
   111                                  
   112                                  
   113 00000000 1801                    _idtr   dw ((0x21*8)+(0x2*8))
   114 00000002 [00000000]                      dd __SYS_TABLES_IDT
   115                                  
   116 00000006 2700                    _gdtr   dw (5*8)-1;4 descriptors of 32kb each one
   117 00000008 [00000000]                      dd __SYS_TABLES_GDT
   118                                   
   119                                  
   120                                  
   121                                  init32:
   122                                  start32_launcher:
   123                                  
   124                                  
   125                                  
   126                                      ;Selectors init
   127 0000000C 66B8[0000]                  mov ax, DS_SEL
   128 00000010 8ED8                        mov ds, ax
   129 00000012 8EC0                        mov es, ax
   130 00000014 8EE8                        mov gs, ax
   131 00000016 8EE0                        mov fs, ax
   132                                  
   133                                      ;Stack init
   134 00000018 8ED0                        mov ss,ax
   135 0000001A BC[00000000]                mov esp,__STACK_END_32
   136 0000001F 31C0                        xor eax,eax
   137                                  
   138                                      ;Clean Stack
   139 00000021 B9[00000000]                mov ecx,__STACK_SIZE_32   
   140                                      .stack_init:
   141 00000026 50                              push eax
   142 00000027 E2FD                            loop .stack_init
   143 00000029 BC[00000000]                mov esp,__STACK_END_32
   144                                  
   145                                      ;Start copying from ROM -> RAM.
   146                                  
   147                                  
   148                                      ;Copy Functions 
   149 0000002E 55                          push ebp
   150 0000002F 89E5                        mov ebp,esp
   151 00000031 68[00000000]                push __functions_size; 
   152 00000036 68[00000000]                push __FUNCTIONS_PHY
   153 0000003B 68[00000000]                push __FUNCTIONS_LMA ; 
   154 00000040 E8(00000000)                call __fast_memcpy_rom
   155 00000045 C9                          leave
   156 00000046 83F801                      cmp eax,1
   157 00000049 0F858E020000                jne .halteo
   158                                          
   159                                  
   160                                      ;Copy Task Text
   161 0000004F 55                          push ebp
   162 00000050 89E5                        mov ebp,esp
   163 00000052 68[00000000]                push  TASK_1_TEXT_size; 
   164 00000057 68[00000000]                push __TASK_1_TEXT_PHY
   165 0000005C 68[00000000]                push __TASK_1_TEXT_LMA ; 
   166 00000061 E8(00000000)                call __fast_memcpy_rom ; 
   167 00000066 C9                          leave
   168 00000067 83F801                      cmp eax,1
   169 0000006A 0F856D020000                jne .halteo
   170                                  
   171                                      
   172                                      ;Copy Task Bss 
   173 00000070 55                          push ebp
   174 00000071 89E5                        mov ebp,esp
   175 00000073 68[00000000]                push  TASK_1_bss_size; 
   176 00000078 68[00000000]                push __TASK_1_BSS_PHY
   177 0000007D 68[00000000]                push __TASK_1_BSS_LMA ; 
   178 00000082 E8(00000000)                call __fast_memcpy_rom
   179 00000087 C9                          leave
   180 00000088 83F801                      cmp eax,1
   181 0000008B 0F854C020000                jne .halteo    
   182                                      
   183                                      ;Copy Task Data
   184 00000091 55                          push ebp
   185 00000092 89E5                        mov ebp,esp
   186 00000094 68[00000000]                push  TASK_1_data_size; 
   187 00000099 68[00000000]                push __TASK_1_DATA_PHY
   188 0000009E 68[00000000]                push __TASK_1_DATA_LMA ; 
   189 000000A3 E8(00000000)                call __fast_memcpy_rom
   190 000000A8 C9                          leave
   191 000000A9 83F801                      cmp eax,1
   192 000000AC 0F852B020000                jne .halteo
   193                                      
   194                                      ;Copy Task RoData
   195 000000B2 55                          push ebp
   196 000000B3 89E5                        mov ebp,esp
   197 000000B5 6A01                        push  0x01;TASK_1_rodata_size; 
   198 000000B7 68[00000000]                push __TASK_1_RODATA_PHY
   199 000000BC 68[00000000]                push __TASK_1_RODATA_LMA ; 
   200 000000C1 E8(00000000)                call __fast_memcpy_rom
   201 000000C6 C9                          leave
   202 000000C7 83F801                      cmp eax,1
   203 000000CA 0F850D020000                jne .halteo
   204                                              
   205                                        ;Copy Task Text
   206 000000D0 55                          push ebp
   207 000000D1 89E5                        mov ebp,esp
   208 000000D3 68[00000000]                push  TASK_2_TEXT_size; 
   209 000000D8 68[00000000]                push __TASK_2_TEXT_PHY
   210 000000DD 68[00000000]                push __TASK_2_TEXT_LMA ; 
   211 000000E2 E8(00000000)                call __fast_memcpy_rom ; 
   212 000000E7 C9                          leave
   213 000000E8 83F801                      cmp eax,1
   214 000000EB 0F85EC010000                jne .halteo
   215                                            
   216                                      ;Copy Task Bss 
   217 000000F1 55                          push ebp
   218 000000F2 89E5                        mov ebp,esp
   219 000000F4 6A01                        push  0x01; TASK_2_bss_size 
   220 000000F6 68[00000000]                push __TASK_2_BSS_PHY
   221 000000FB 68[00000000]                push __TASK_2_BSS_LMA ; 
   222 00000100 E8(00000000)                call __fast_memcpy_rom
   223 00000105 C9                          leave
   224 00000106 83F801                      cmp eax,1
   225 00000109 0F85CE010000                jne .halteo    
   226                                    
   227                                      ;Copy Task Data
   228 0000010F 55                          push ebp
   229 00000110 89E5                        mov ebp,esp
   230 00000112 68[00000000]                push  TASK_2_data_size; 
   231 00000117 68[00000000]                push __TASK_2_DATA_PHY
   232 0000011C 68[00000000]                push __TASK_2_DATA_LMA ; 
   233 00000121 E8(00000000)                call __fast_memcpy_rom
   234 00000126 C9                          leave
   235 00000127 83F801                      cmp eax,1
   236 0000012A 0F85AD010000                jne .halteo
   237                                  
   238                                             
   239                                      
   240                                      ;Copy Task RoData
   241 00000130 55                          push ebp
   242 00000131 89E5                        mov ebp,esp
   243 00000133 6A01                        push  0x01;TASK_2_rodata_size; 
   244 00000135 68[00000000]                push __TASK_2_RODATA_PHY
   245 0000013A 68[00000000]                push __TASK_2_RODATA_LMA ; 
   246 0000013F E8(00000000)                call __fast_memcpy_rom
   247 00000144 C9                          leave
   248 00000145 83F801                      cmp eax,1
   249 00000148 0F858F010000                jne .halteo
   250                                  
   251                                  ;Copy Task Text
   252 0000014E 55                          push ebp
   253 0000014F 89E5                        mov ebp,esp
   254 00000151 68[00000000]                push  TASK_3_TEXT_size; 
   255 00000156 68[00000000]                push __TASK_3_TEXT_PHY
   256 0000015B 68[00000000]                push __TASK_3_TEXT_LMA ; 
   257 00000160 E8(00000000)                call __fast_memcpy_rom ; 
   258 00000165 C9                          leave
   259 00000166 83F801                      cmp eax,1
   260 00000169 0F856E010000                jne .halteo 
   261                                      
   262                                      ;Copy Task Bss 
   263 0000016F 55                          push ebp
   264 00000170 89E5                        mov ebp,esp
   265 00000172 6A01                        push  0x01; TASK_3_bss_size 
   266 00000174 68[00000000]                push __TASK_3_BSS_PHY
   267 00000179 68[00000000]                push __TASK_3_BSS_LMA ; 
   268 0000017E E8(00000000)                call __fast_memcpy_rom
   269 00000183 C9                          leave
   270 00000184 83F801                      cmp eax,1
   271 00000187 0F8550010000                jne .halteo    
   272                                      
   273                                      ;Copy Task Data
   274 0000018D 55                          push ebp
   275 0000018E 89E5                        mov ebp,esp
   276 00000190 6A01                        push  0x01;TASK_3_data_size; 
   277 00000192 68[00000000]                push __TASK_3_DATA_PHY
   278 00000197 68[00000000]                push __TASK_3_DATA_LMA ; 
   279 0000019C E8(00000000)                call __fast_memcpy_rom
   280 000001A1 C9                          leave
   281 000001A2 83F801                      cmp eax,1
   282 000001A5 0F8532010000                jne .halteo
   283                                      
   284                                      ;Copy Task RoData
   285 000001AB 55                          push ebp
   286 000001AC 89E5                        mov ebp,esp
   287 000001AE 6A01                        push  0x01;TASK_3_rodata_size; 
   288 000001B0 68[00000000]                push __TASK_3_RODATA_PHY
   289 000001B5 68[00000000]                push __TASK_3_RODATA_LMA ; 
   290 000001BA E8(00000000)                call __fast_memcpy_rom
   291 000001BF C9                          leave
   292 000001C0 83F801                      cmp eax,1
   293 000001C3 0F8514010000                jne .halteo       
   294                                  
   295                                      ;Copy Task Text
   296 000001C9 55                          push ebp
   297 000001CA 89E5                        mov ebp,esp
   298 000001CC 68[00000000]                push  TASK_4_TEXT_size; 
   299 000001D1 68[00000000]                push __TASK_4_TEXT_PHY
   300 000001D6 68[00000000]                push __TASK_4_TEXT_LMA ; 
   301 000001DB E8(00000000)                call __fast_memcpy_rom ; 
   302 000001E0 C9                          leave
   303 000001E1 83F801                      cmp eax,1
   304 000001E4 0F85F3000000                jne .halteo 
   305                                  
   306                                      ;Copy Task Bss 
   307 000001EA 55                          push ebp
   308 000001EB 89E5                        mov ebp,esp
   309 000001ED 6A01                        push  0x01;TASK_4_bss_size; 
   310 000001EF 68[00000000]                push __TASK_4_BSS_PHY
   311 000001F4 68[00000000]                push __TASK_4_BSS_LMA ; 
   312 000001F9 E8(00000000)                call __fast_memcpy_rom
   313 000001FE C9                          leave
   314 000001FF 83F801                      cmp eax,1
   315 00000202 0F85D5000000                jne .halteo    
   316                                      
   317                                      ;Copy Task Data
   318 00000208 55                          push ebp
   319 00000209 89E5                        mov ebp,esp
   320 0000020B 68[00000000]                push  TASK_4_data_size; 
   321 00000210 68[00000000]                push __TASK_4_DATA_PHY
   322 00000215 68[00000000]                push __TASK_4_DATA_LMA ; 
   323 0000021A E8(00000000)                call __fast_memcpy_rom
   324 0000021F C9                          leave
   325 00000220 83F801                      cmp eax,1
   326 00000223 0F85B4000000                jne .halteo
   327                                  
   328                                      ;Copy Task RoData
   329 00000229 55                          push ebp
   330 0000022A 89E5                        mov ebp,esp
   331 0000022C 6A01                        push  0x01;TASK_4_rodata_size; 
   332 0000022E 68[00000000]                push __TASK_4_RODATA_PHY
   333 00000233 68[00000000]                push __TASK_4_RODATA_LMA ; 
   334 00000238 E8(00000000)                call __fast_memcpy_rom
   335 0000023D C9                          leave
   336 0000023E 83F801                      cmp eax,1
   337 00000241 0F8596000000                jne .halteo
   338                                  
   339 00000247 55                          push ebp
   340 00000248 89E5                        mov ebp,esp
   341 0000024A 68[00000000]                push  __DATA__size; 
   342 0000024F 68[00000000]                push __DATA_PHY
   343 00000254 68[00000000]                push __DATA_LMA ; 
   344 00000259 E8(00000000)                call __fast_memcpy_rom
   345 0000025E C9                          leave
   346 0000025F 83F801                      cmp eax,1
   347 00000262 7579                        jne .halteo  
   348                                  
   349                                      ;Copy Kernel
   350 00000264 55                          push ebp
   351 00000265 89E5                        mov ebp,esp
   352 00000267 68[00000000]                push __codigo_KERNEL32_size; 
   353 0000026C 68[00000000]                push __KERNEL_32_PHY
   354 00000271 68[00000000]                push __KERNEL_32_LMA;
   355 00000276 E8(00000000)                call __fast_memcpy_rom
   356 0000027B C9                          leave
   357 0000027C 83F801                      cmp eax,1
   358 0000027F 755C                        jne .halteo
   359                                  
   360                                      ;ISR & KEYBOARD Codes
   361 00000281 55                          push ebp
   362 00000282 89E5                        mov ebp,esp
   363 00000284 68[00000000]                push __ISR_AND_KEYBOARD_CODE_size; 
   364 00000289 68[00000000]                push __ISR_AND_KEYBOARD_PHY
   365 0000028E 68[00000000]                push __ISR_AND_KEYBOARD_LMA;_
   366 00000293 E8(00000000)                call __fast_memcpy_rom
   367 00000298 C9                          leave
   368 00000299 83F801                      cmp eax,1
   369 0000029C 753F                        jne .halteo
   370                                  
   371 0000029E 55                          push ebp
   372 0000029F 89E5                        mov ebp,esp
   373 000002A1 68[00000000]                push  __sys_tables_size; 
   374 000002A6 68[00000000]                push __SYS_TABLES_GDT
   375 000002AB 68[00000000]                push __SYS_TABLES_LMA ;
   376 000002B0 E8(00000000)                call __fast_memcpy_rom
   377 000002B5 C9                          leave
   378 000002B6 83F801                      cmp eax,1
   379 000002B9 7522                        jne .halteo
   380                                  
   381 000002BB E8(00000000)                call init_pic ; PIC Init
   382 000002C0 E8(00000000)                call init_IDT;  IDT Init
   383 000002C5 E8(00000000)                call init_timer0; 
   384                                  
   385                                      ;Here I Should start setting CR3 & CR0.PG (Bit 31)
   386 000002CA 0F011D[00000000]            lidt[_idtr] ;Load IDT
   387 000002D1 0F0115[06000000]            lgdt[_gdtr];Load GDT
   388                                  
   389 000002D8 E9(00000000)                jmp go_paging; Let's do it!
   390                                  
   391                                  
   392                                  
   393                                  .halteo:
   394 000002DD F4                          hlt
   395 000002DE EBFD                        jmp .halteo
   396                                  
   397                                  
   398                                  
   399                                  turn_on_paging:
   400                                  
   401                                      ; Paging turn on
   402 000002E0 0F20C0                      mov   eax, cr0 
   403 000002E3 0D00000080                  or    eax, X86_CR0_PG
   404 000002E8 0F22C0                      mov   cr0, eax  
   405                                      
   406 000002EB E8(00000000)                call load_tss;
   407                                      ;mov eax, 0        ;Little Video Init
   408                                      ;mov [Digit_Table_Average], eax
   409                                      ;mov eax, VIDEO_BUFFER_ADDR
   410                                      ;mov [Screen_pointer],eax  
   411                                  
   412 000002F0 EA[00000000][0000]          jmp CS_SEL_32:kernel32_init
