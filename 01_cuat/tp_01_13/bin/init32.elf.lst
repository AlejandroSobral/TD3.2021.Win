     1                                  USE32
     2                                  GLOBAL init32
     3                                  GLOBAL start32_launcher
     4                                  GLOBAL TURN_ON_PAGING
     5                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ;/* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ;/* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ;/* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ;/* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ;/* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ;/* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ;/* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ;/* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ;/* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ;/* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ;/* PaGine*/
    12                              <1> 
    13                              <1> %define IDLE            0x00000000;
    14                              <1> %define WAITING         0x00000001;
    15                              <1> %define RUNNING         0x00000002;
     6                                  
     7                                  SECTION .init32
     8                                  
     9                                  ;Load references
    10                                  EXTERN  DS_SEL
    11                                  EXTERN __FUNCTIONS_PHY
    12                                  EXTERN __TASK_1_BSS_PHY
    13                                  EXTERN __TASK_1_DATA_PHY
    14                                  EXTERN __TASK_1_RODATA_PHY
    15                                  EXTERN __TASK_1_TEXT_PHY
    16                                  EXTERN __TASK_4_BSS_PHY
    17                                  EXTERN __TASK_4_DATA_PHY
    18                                  EXTERN __TASK_4_RODATA_PHY
    19                                  EXTERN __TASK_4_TEXT_PHY
    20                                  EXTERN __TASK_2_BSS_PHY
    21                                  EXTERN __TASK_2_DATA_PHY
    22                                  EXTERN __TASK_2_RODATA_PHY
    23                                  EXTERN __TASK_2_TEXT_PHY
    24                                  EXTERN __TASK_3_BSS_PHY
    25                                  EXTERN __TASK_3_DATA_PHY
    26                                  EXTERN __TASK_3_RODATA_PHY
    27                                  EXTERN __TASK_3_TEXT_PHY
    28                                  EXTERN __DATA_PHY
    29                                  EXTERN __KERNEL_32_PHY
    30                                  EXTERN __ISR_AND_KEYBOARD_PHY
    31                                  EXTERN __SYS_TABLES_PHY
    32                                  EXTERN  __STACK_END_32
    33                                  EXTERN  __STACK_SIZE_32
    34                                  EXTERN  CS_SEL_32
    35                                  EXTERN  kernel32_init
    36                                  EXTERN  __KERNEL_32_LMA
    37                                  EXTERN  __codigo_KERNEL32_size
    38                                  EXTERN __ISR_AND_KEYBOARD_CODE_size; 
    39                                  EXTERN __ISR_AND_KEYBOARD_VMA;
    40                                  EXTERN __ISR_AND_KEYBOARD_LMA;_
    41                                  EXTERN  __fast_memcpy
    42                                  EXTERN  __fast_memcpy_rom
    43                                  EXTERN __DATA__size
    44                                  EXTERN  kernel32_code_size
    45                                  EXTERN  __functions_size
    46                                  EXTERN TASK_1_rodata_size
    47                                  EXTERN TASK_1_data_size
    48                                  EXTERN TASK_1_bss_size
    49                                  EXTERN TASK_1_TEXT_size
    50                                  EXTERN TASK_2_rodata_size
    51                                  EXTERN TASK_2_data_size
    52                                  EXTERN TASK_2_bss_size
    53                                  EXTERN TASK_2_TEXT_size
    54                                  EXTERN TASK_3_rodata_size
    55                                  EXTERN TASK_3_data_size
    56                                  EXTERN TASK_3_bss_size
    57                                  EXTERN TASK_3_TEXT_size
    58                                  EXTERN TASK_4_rodata_size
    59                                  EXTERN TASK_4_data_size
    60                                  EXTERN TASK_4_bss_size
    61                                  EXTERN TASK_4_TEXT_size
    62                                  EXTERN __TASK_1_DATA_LMA
    63                                  EXTERN __TASK_1_DATA_VMA
    64                                  EXTERN __TASK_1_RODATA_VMA
    65                                  EXTERN __TASK_1_RODATA_LMA
    66                                  EXTERN __TASK_1_TEXT_LMA
    67                                  EXTERN __TASK_1_TEXT_VMA
    68                                  EXTERN __TASK_1_BSS_LMA
    69                                  EXTERN __TASK_1_BSS_VMA
    70                                  EXTERN __TASK_2_DATA_LMA
    71                                  EXTERN __TASK_2_RODATA_LMA
    72                                  EXTERN __TASK_2_TEXT_LMA
    73                                  EXTERN __TASK_2_TEXT_VMA
    74                                  EXTERN __TASK_2_BSS_LMA
    75                                  EXTERN __TASK_2_BSS_VMA
    76                                  EXTERN __TASK_3_DATA_LMA
    77                                  EXTERN __TASK_3_RODATA_LMA
    78                                  EXTERN __TASK_3_TEXT_LMA
    79                                  EXTERN __TASK_3_TEXT_VMA
    80                                  EXTERN __TASK_3_BSS_LMA
    81                                  EXTERN __TASK_3_BSS_VMA
    82                                  EXTERN __TASK_4_DATA_LMA
    83                                  EXTERN __TASK_4_DATA_VMA
    84                                  EXTERN __TASK_4_RODATA_VMA
    85                                  EXTERN __TASK_4_RODATA_LMA
    86                                  EXTERN __TASK_4_TEXT_LMA
    87                                  EXTERN __TASK_4_TEXT_VMA
    88                                  EXTERN __TASK_4_BSS_LMA
    89                                  EXTERN __TASK_4_BSS_VMA
    90                                  EXTERN  __FUNCTIONS_LMA
    91                                  EXTERN  __KERNEL_32_VMA
    92                                  EXTERN  __FUNCTIONS_VMA
    93                                  EXTERN __DATA_LMA
    94                                  EXTERN __DATA_VMA
    95                                  EXTERN __SYS_TABLES_GDT 
    96                                  EXTERN __SYS_TABLES_IDT
    97                                  EXTERN __SYS_TABLES_LMA
    98                                  EXTERN  __sys_tables_size
    99                                  EXTERN SCREEN_POINTER
   100                                  EXTERN gdtr_32
   101                                  
   102                                  ;JMP References
   103                                  EXTERN init_pic
   104                                  EXTERN init_IDT
   105                                  EXTERN init_timer0
   106                                  EXTERN load_tss
   107                                  
   108                                  
   109                                  EXTERN go_paging
   110                                  KeyBoard_IRQ equ 0x01
   111                                  VIDEO_BUFFER_ADDR EQU 0x000B8000
   112                                  
   113                                  
   114 00000000 1004                    _idtr   dw ((0x80*8)+(0x2*8))
   115 00000002 [00000000]                      dd __SYS_TABLES_IDT
   116                                  
   117                                  
   118                                  init32:
   119                                  start32_launcher:
   120                                  
   121                                      ;Selectors init
   122 00000006 66B8[0000]                  mov ax, DS_SEL
   123 0000000A 8ED8                        mov ds, ax
   124 0000000C 8EC0                        mov es, ax
   125 0000000E 8EE8                        mov gs, ax
   126 00000010 8EE0                        mov fs, ax
   127                                  
   128                                      ;Stack init
   129 00000012 8ED0                        mov ss,ax
   130 00000014 BC[00000000]                mov esp,__STACK_END_32
   131 00000019 31C0                        xor eax,eax
   132                                  
   133                                      ;Clean Stack
   134 0000001B B9[00000000]                mov ecx,__STACK_SIZE_32   
   135                                      .stack_init:
   136 00000020 50                              push eax
   137 00000021 E2FD                            loop .stack_init
   138 00000023 BC[00000000]                mov esp,__STACK_END_32
   139                                  
   140                                      ;Start copying from ROM -> RAM.
   141                                      ;Copy Functions 
   142 00000028 55                          push ebp
   143 00000029 89E5                        mov ebp,esp
   144 0000002B 68[00000000]                push __functions_size; 
   145 00000030 68[00000000]                push __FUNCTIONS_PHY
   146 00000035 68[00000000]                push __FUNCTIONS_LMA ; 
   147 0000003A E8(00000000)                call __fast_memcpy_rom
   148 0000003F C9                          leave
   149 00000040 83F801                      cmp eax,1
   150 00000043 0F858E020000                jne .halteo
   151                                          
   152                                  
   153                                      ;Copy Task Text
   154 00000049 55                          push ebp
   155 0000004A 89E5                        mov ebp,esp
   156 0000004C 68[00000000]                push  TASK_1_TEXT_size; 
   157 00000051 68[00000000]                push __TASK_1_TEXT_PHY
   158 00000056 68[00000000]                push __TASK_1_TEXT_LMA ; 
   159 0000005B E8(00000000)                call __fast_memcpy_rom ; 
   160 00000060 C9                          leave
   161 00000061 83F801                      cmp eax,1
   162 00000064 0F856D020000                jne .halteo
   163                                  
   164                                      
   165                                      ;Copy Task Bss 
   166 0000006A 55                          push ebp
   167 0000006B 89E5                        mov ebp,esp
   168 0000006D 68[00000000]                push  TASK_1_bss_size; 
   169 00000072 68[00000000]                push __TASK_1_BSS_PHY
   170 00000077 68[00000000]                push __TASK_1_BSS_LMA ; 
   171 0000007C E8(00000000)                call __fast_memcpy_rom
   172 00000081 C9                          leave
   173 00000082 83F801                      cmp eax,1
   174 00000085 0F854C020000                jne .halteo    
   175                                      
   176                                      ;Copy Task Data
   177 0000008B 55                          push ebp
   178 0000008C 89E5                        mov ebp,esp
   179 0000008E 68[00000000]                push  TASK_1_data_size; 
   180 00000093 68[00000000]                push __TASK_1_DATA_PHY
   181 00000098 68[00000000]                push __TASK_1_DATA_LMA ; 
   182 0000009D E8(00000000)                call __fast_memcpy_rom
   183 000000A2 C9                          leave
   184 000000A3 83F801                      cmp eax,1
   185 000000A6 0F852B020000                jne .halteo
   186                                      
   187                                      ;Copy Task RoData
   188 000000AC 55                          push ebp
   189 000000AD 89E5                        mov ebp,esp
   190 000000AF 6A01                        push  0x01;TASK_1_rodata_size; 
   191 000000B1 68[00000000]                push __TASK_1_RODATA_PHY
   192 000000B6 68[00000000]                push __TASK_1_RODATA_LMA ; 
   193 000000BB E8(00000000)                call __fast_memcpy_rom
   194 000000C0 C9                          leave
   195 000000C1 83F801                      cmp eax,1
   196 000000C4 0F850D020000                jne .halteo
   197                                              
   198                                        ;Copy Task Text
   199 000000CA 55                          push ebp
   200 000000CB 89E5                        mov ebp,esp
   201 000000CD 68[00000000]                push  TASK_2_TEXT_size; 
   202 000000D2 68[00000000]                push __TASK_2_TEXT_PHY
   203 000000D7 68[00000000]                push __TASK_2_TEXT_LMA ; 
   204 000000DC E8(00000000)                call __fast_memcpy_rom ; 
   205 000000E1 C9                          leave
   206 000000E2 83F801                      cmp eax,1
   207 000000E5 0F85EC010000                jne .halteo
   208                                            
   209                                      ;Copy Task Bss 
   210 000000EB 55                          push ebp
   211 000000EC 89E5                        mov ebp,esp
   212 000000EE 6A01                        push  0x01; TASK_2_bss_size 
   213 000000F0 68[00000000]                push __TASK_2_BSS_PHY
   214 000000F5 68[00000000]                push __TASK_2_BSS_LMA ; 
   215 000000FA E8(00000000)                call __fast_memcpy_rom
   216 000000FF C9                          leave
   217 00000100 83F801                      cmp eax,1
   218 00000103 0F85CE010000                jne .halteo    
   219                                    
   220                                      ;Copy Task Data
   221 00000109 55                          push ebp
   222 0000010A 89E5                        mov ebp,esp
   223 0000010C 68[00000000]                push  TASK_2_data_size; 
   224 00000111 68[00000000]                push __TASK_2_DATA_PHY
   225 00000116 68[00000000]                push __TASK_2_DATA_LMA ; 
   226 0000011B E8(00000000)                call __fast_memcpy_rom
   227 00000120 C9                          leave
   228 00000121 83F801                      cmp eax,1
   229 00000124 0F85AD010000                jne .halteo
   230                                  
   231                                             
   232                                      
   233                                      ;Copy Task RoData
   234 0000012A 55                          push ebp
   235 0000012B 89E5                        mov ebp,esp
   236 0000012D 6A01                        push  0x01;TASK_2_rodata_size; 
   237 0000012F 68[00000000]                push __TASK_2_RODATA_PHY
   238 00000134 68[00000000]                push __TASK_2_RODATA_LMA ; 
   239 00000139 E8(00000000)                call __fast_memcpy_rom
   240 0000013E C9                          leave
   241 0000013F 83F801                      cmp eax,1
   242 00000142 0F858F010000                jne .halteo
   243                                  
   244                                  ;Copy Task Text
   245 00000148 55                          push ebp
   246 00000149 89E5                        mov ebp,esp
   247 0000014B 68[00000000]                push  TASK_3_TEXT_size; 
   248 00000150 68[00000000]                push __TASK_3_TEXT_PHY
   249 00000155 68[00000000]                push __TASK_3_TEXT_LMA ; 
   250 0000015A E8(00000000)                call __fast_memcpy_rom ; 
   251 0000015F C9                          leave
   252 00000160 83F801                      cmp eax,1
   253 00000163 0F856E010000                jne .halteo 
   254                                      
   255                                      ;Copy Task Bss 
   256 00000169 55                          push ebp
   257 0000016A 89E5                        mov ebp,esp
   258 0000016C 6A01                        push  0x01; TASK_3_bss_size 
   259 0000016E 68[00000000]                push __TASK_3_BSS_PHY
   260 00000173 68[00000000]                push __TASK_3_BSS_LMA ; 
   261 00000178 E8(00000000)                call __fast_memcpy_rom
   262 0000017D C9                          leave
   263 0000017E 83F801                      cmp eax,1
   264 00000181 0F8550010000                jne .halteo    
   265                                      
   266                                      ;Copy Task Data
   267 00000187 55                          push ebp
   268 00000188 89E5                        mov ebp,esp
   269 0000018A 6A01                        push  0x01;TASK_3_data_size; 
   270 0000018C 68[00000000]                push __TASK_3_DATA_PHY
   271 00000191 68[00000000]                push __TASK_3_DATA_LMA ; 
   272 00000196 E8(00000000)                call __fast_memcpy_rom
   273 0000019B C9                          leave
   274 0000019C 83F801                      cmp eax,1
   275 0000019F 0F8532010000                jne .halteo
   276                                      
   277                                      ;Copy Task RoData
   278 000001A5 55                          push ebp
   279 000001A6 89E5                        mov ebp,esp
   280 000001A8 6A01                        push  0x01;TASK_3_rodata_size; 
   281 000001AA 68[00000000]                push __TASK_3_RODATA_PHY
   282 000001AF 68[00000000]                push __TASK_3_RODATA_LMA ; 
   283 000001B4 E8(00000000)                call __fast_memcpy_rom
   284 000001B9 C9                          leave
   285 000001BA 83F801                      cmp eax,1
   286 000001BD 0F8514010000                jne .halteo       
   287                                  
   288                                      ;Copy Task Text
   289 000001C3 55                          push ebp
   290 000001C4 89E5                        mov ebp,esp
   291 000001C6 68[00000000]                push  TASK_4_TEXT_size; 
   292 000001CB 68[00000000]                push __TASK_4_TEXT_PHY
   293 000001D0 68[00000000]                push __TASK_4_TEXT_LMA ; 
   294 000001D5 E8(00000000)                call __fast_memcpy_rom ; 
   295 000001DA C9                          leave
   296 000001DB 83F801                      cmp eax,1
   297 000001DE 0F85F3000000                jne .halteo 
   298                                  
   299                                      ;Copy Task Bss 
   300 000001E4 55                          push ebp
   301 000001E5 89E5                        mov ebp,esp
   302 000001E7 6A01                        push  0x01;TASK_4_bss_size; 
   303 000001E9 68[00000000]                push __TASK_4_BSS_PHY
   304 000001EE 68[00000000]                push __TASK_4_BSS_LMA ; 
   305 000001F3 E8(00000000)                call __fast_memcpy_rom
   306 000001F8 C9                          leave
   307 000001F9 83F801                      cmp eax,1
   308 000001FC 0F85D5000000                jne .halteo    
   309                                      
   310                                      ;Copy Task Data
   311 00000202 55                          push ebp
   312 00000203 89E5                        mov ebp,esp
   313 00000205 68[00000000]                push  TASK_4_data_size; 
   314 0000020A 68[00000000]                push __TASK_4_DATA_PHY
   315 0000020F 68[00000000]                push __TASK_4_DATA_LMA ; 
   316 00000214 E8(00000000)                call __fast_memcpy_rom
   317 00000219 C9                          leave
   318 0000021A 83F801                      cmp eax,1
   319 0000021D 0F85B4000000                jne .halteo
   320                                  
   321                                      ;Copy Task RoData
   322 00000223 55                          push ebp
   323 00000224 89E5                        mov ebp,esp
   324 00000226 6A01                        push  0x01;TASK_4_rodata_size; 
   325 00000228 68[00000000]                push __TASK_4_RODATA_PHY
   326 0000022D 68[00000000]                push __TASK_4_RODATA_LMA ; 
   327 00000232 E8(00000000)                call __fast_memcpy_rom
   328 00000237 C9                          leave
   329 00000238 83F801                      cmp eax,1
   330 0000023B 0F8596000000                jne .halteo
   331                                  
   332 00000241 55                          push ebp
   333 00000242 89E5                        mov ebp,esp
   334 00000244 68[00000000]                push  __DATA__size; 
   335 00000249 68[00000000]                push __DATA_PHY
   336 0000024E 68[00000000]                push __DATA_LMA ; 
   337 00000253 E8(00000000)                call __fast_memcpy_rom
   338 00000258 C9                          leave
   339 00000259 83F801                      cmp eax,1
   340 0000025C 7579                        jne .halteo  
   341                                  
   342                                      ;Copy Kernel
   343 0000025E 55                          push ebp
   344 0000025F 89E5                        mov ebp,esp
   345 00000261 68[00000000]                push __codigo_KERNEL32_size; 
   346 00000266 68[00000000]                push __KERNEL_32_PHY
   347 0000026B 68[00000000]                push __KERNEL_32_LMA;
   348 00000270 E8(00000000)                call __fast_memcpy_rom
   349 00000275 C9                          leave
   350 00000276 83F801                      cmp eax,1
   351 00000279 755C                        jne .halteo
   352                                  
   353                                      ;ISR & KEYBOARD Codes
   354 0000027B 55                          push ebp
   355 0000027C 89E5                        mov ebp,esp
   356 0000027E 68[00000000]                push __ISR_AND_KEYBOARD_CODE_size; 
   357 00000283 68[00000000]                push __ISR_AND_KEYBOARD_PHY
   358 00000288 68[00000000]                push __ISR_AND_KEYBOARD_LMA;_
   359 0000028D E8(00000000)                call __fast_memcpy_rom
   360 00000292 C9                          leave
   361 00000293 83F801                      cmp eax,1
   362 00000296 753F                        jne .halteo
   363                                  
   364 00000298 55                          push ebp
   365 00000299 89E5                        mov ebp,esp
   366 0000029B 68[00000000]                push  __sys_tables_size; 
   367 000002A0 68[00000000]                push __SYS_TABLES_GDT
   368 000002A5 68[00000000]                push __SYS_TABLES_LMA ;
   369 000002AA E8(00000000)                call __fast_memcpy_rom
   370 000002AF C9                          leave
   371 000002B0 83F801                      cmp eax,1
   372 000002B3 7522                        jne .halteo
   373                                  
   374 000002B5 E8(00000000)                call init_IDT;  IDT Init
   375                                  
   376                                      ;Here I Should start setting CR3 & CR0.PG (Bit 31)
   377 000002BA 0F011D[00000000]            lidt[_idtr] ;Load IDT
   378 000002C1 0F0115[00000000]            lgdt[gdtr_32];Load GDT
   379                                  
   380 000002C8 E8(00000000)                call init_pic ; PIC Init
   381 000002CD E8(00000000)                call init_timer0; 
   382 000002D2 E9(00000000)                jmp go_paging; Let's do it!
   383                                      
   384                                  
   385                                  .halteo:
   386 000002D7 F4                          hlt
   387 000002D8 EBFD                        jmp .halteo
   388                                  
   389                                  
   390                                  
   391                                  TURN_ON_PAGING:
   392                                      ; Paging turn on
   393 000002DA 0F20C0                      mov   eax, cr0 
   394 000002DD 0D00000080                  or    eax, X86_CR0_PG
   395 000002E2 0F22C0                      mov   cr0, eax  
   396                                      
   397 000002E5 E8(00000000)                call load_tss;
   398                                  
   399                                  
   400 000002EA EA[00000000][0000]          jmp CS_SEL_32:kernel32_init
