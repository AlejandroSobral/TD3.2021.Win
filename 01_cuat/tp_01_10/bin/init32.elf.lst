     1                                  USE32
     2                                  GLOBAL init32
     3                                  GLOBAL start32_launcher
     4                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ;/* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ;/* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ;/* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ;/* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ;/* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ;/* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ;/* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ;/* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ;/* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ;/* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ;/* PaGine*/
     5                                  
     6                                  SECTION .init32
     7                                  
     8                                  ;Load references
     9                                  EXTERN  DS_SEL
    10                                  EXTERN __FUNCTIONS_PHY
    11                                  EXTERN __TASK_1_BSS_PHY
    12                                  EXTERN __TASK_1_DATA_PHY
    13                                  EXTERN __TASK_1_RODATA_PHY
    14                                  EXTERN __TASK_1_TEXT_PHY
    15                                  EXTERN __DATA_PHY
    16                                  EXTERN __KERNEL_32_PHY
    17                                  EXTERN __ISR_AND_KEYBOARD_PHY
    18                                  EXTERN __SYS_TABLES_PHY
    19                                  EXTERN  __STACK_END_32
    20                                  EXTERN  __STACK_SIZE_32
    21                                  EXTERN  CS_SEL_32
    22                                  EXTERN  kernel32_init
    23                                  EXTERN  __KERNEL_32_LMA
    24                                  EXTERN  __codigo_kernel32_size
    25                                  EXTERN __ISR_AND_KEYBOARD_CODE_size; 
    26                                  EXTERN __ISR_AND_KEYBOARD_VMA;
    27                                  EXTERN __ISR_AND_KEYBOARD_LMA;_
    28                                  EXTERN  __fast_memcpy
    29                                  EXTERN  __fast_memcpy_rom
    30                                  EXTERN __DATA__size
    31                                  EXTERN  kernel32_code_size
    32                                  EXTERN  __functions_size
    33                                  EXTERN task_1_rodata_size
    34                                  EXTERN task_1_data_size
    35                                  EXTERN TASK_1_bss_size
    36                                  EXTERN TASK_1_TEXT_size
    37                                  EXTERN __TASK_1_DATA_LMA
    38                                  EXTERN __TASK_1_DATA_VMA
    39                                  EXTERN __TASK_1_RODATA_VMA
    40                                  EXTERN __TASK_1_RODATA_LMA
    41                                  EXTERN __TASK_1_TEXT_LMA
    42                                  EXTERN __TASK_1_TEXT_VMA
    43                                  EXTERN __TASK_1_BSS_LMA
    44                                  EXTERN __TASK_1_BSS_VMA
    45                                  EXTERN  __FUNCTIONS_LMA
    46                                  EXTERN  __KERNEL_32_VMA
    47                                  EXTERN  __FUNCTIONS_VMA
    48                                  EXTERN __DATA_LMA
    49                                  EXTERN __DATA_VMA
    50                                  EXTERN __SYS_TABLES_GDT 
    51                                  EXTERN __SYS_TABLES_IDT
    52                                  EXTERN __SYS_TABLES_LMA
    53                                  EXTERN  __sys_tables_size
    54                                  EXTERN Digit_Table_Average
    55                                  EXTERN Screen_pointer
    56                                  
    57                                  ;JMP References
    58                                  EXTERN init_pic
    59                                  EXTERN init_IDT
    60                                  EXTERN init_timer0
    61                                  
    62                                  EXTERN go_paging
    63                                  KeyBoard_IRQ equ 0x01
    64                                  VIDEO_BUFFER_ADDR EQU 0x000B8000
    65                                  
    66                                  GDT_LENGTH EQU (4); 4 descriptors of 32kb each one
    67                                  
    68 00000000 1801                    _idtr   dw ((0x21*8)+(0x2*8))
    69 00000002 [00000000]                      dd __SYS_TABLES_IDT
    70                                  
    71 00000006 1F00                    _gdtr   dw (4*8)-1;4 descriptors of 32kb each one
    72 00000008 [00000000]                      dd __SYS_TABLES_GDT
    73                                   
    74                                  
    75                                  
    76                                  init32:
    77                                  start32_launcher:
    78                                  
    79                                      ;Selectors init
    80 0000000C 66B8[0000]                  mov ax, DS_SEL
    81 00000010 8ED8                        mov ds, ax
    82 00000012 8EC0                        mov es, ax
    83 00000014 8EE8                        mov gs, ax
    84 00000016 8EE0                        mov fs, ax
    85                                  
    86                                      ;Stack init
    87 00000018 8ED0                        mov ss,ax
    88 0000001A BC[00000000]                mov esp,__STACK_END_32
    89 0000001F 31C0                        xor eax,eax
    90                                  
    91                                      ;Clean Stack
    92 00000021 B9[00000000]                mov ecx,__STACK_SIZE_32   
    93                                      .stack_init:
    94 00000026 50                              push eax
    95 00000027 E2FD                            loop .stack_init
    96 00000029 BC[00000000]                mov esp,__STACK_END_32
    97                                  
    98                                      ;Start copying from ROM -> RAM.
    99                                  
   100                                      ;Copy Functions 
   101 0000002E 55                          push ebp
   102 0000002F 89E5                        mov ebp,esp
   103 00000031 68[00000000]                push __functions_size; 
   104 00000036 68[00000000]                push __FUNCTIONS_PHY
   105 0000003B 68[00000000]                push __FUNCTIONS_LMA ; 
   106 00000040 E8(00000000)                call __fast_memcpy_rom
   107 00000045 C9                          leave
   108 00000046 83F801                      cmp eax,1
   109 00000049 0F853F010000                jne .halteo
   110                                  
   111                                      ;Copy Task Text
   112 0000004F 55                          push ebp
   113 00000050 89E5                        mov ebp,esp
   114 00000052 68[00000000]                push  TASK_1_TEXT_size; 
   115 00000057 68[00000000]                push __TASK_1_TEXT_PHY
   116 0000005C 68[00000000]                push __TASK_1_TEXT_LMA ; 
   117 00000061 E8(00000000)                call __fast_memcpy
   118 00000066 C9                          leave
   119 00000067 83F801                      cmp eax,1
   120 0000006A 0F851E010000                jne .halteo
   121                                  
   122                                      ;Copy Task Bss 
   123 00000070 55                          push ebp
   124 00000071 89E5                        mov ebp,esp
   125 00000073 68[00000000]                push  TASK_1_bss_size; 
   126 00000078 68[00000000]                push __TASK_1_BSS_PHY
   127 0000007D 68[00000000]                push __TASK_1_BSS_LMA ; 
   128 00000082 E8(00000000)                call __fast_memcpy
   129 00000087 C9                          leave
   130 00000088 83F801                      cmp eax,1
   131 0000008B 0F85FD000000                jne .halteo    
   132                                  
   133                                      ;Copy Task Data
   134 00000091 55                          push ebp
   135 00000092 89E5                        mov ebp,esp
   136 00000094 68[00000000]                push  task_1_data_size; 
   137 00000099 68[00000000]                push __TASK_1_DATA_PHY
   138 0000009E 68[00000000]                push __TASK_1_DATA_LMA ; 
   139 000000A3 E8(00000000)                call __fast_memcpy
   140 000000A8 C9                          leave
   141 000000A9 83F801                      cmp eax,1
   142 000000AC 0F85DC000000                jne .halteo
   143                                  
   144                                      ;Copy Task RoData
   145 000000B2 55                          push ebp
   146 000000B3 89E5                        mov ebp,esp
   147 000000B5 68[00000000]                push  task_1_rodata_size; 
   148 000000BA 68[00000000]                push __TASK_1_RODATA_PHY
   149 000000BF 68[00000000]                push __TASK_1_RODATA_LMA ; 
   150 000000C4 E8(00000000)                call __fast_memcpy
   151 000000C9 C9                          leave
   152 000000CA 83F801                      cmp eax,1
   153 000000CD 0F85BB000000                jne .halteo
   154                                  
   155                                      ;Copy Task RoData
   156 000000D3 55                          push ebp
   157 000000D4 89E5                        mov ebp,esp
   158 000000D6 68[00000000]                push  __DATA__size; 
   159 000000DB 68[00000000]                push __DATA_PHY
   160 000000E0 68[00000000]                push __DATA_LMA ; 
   161 000000E5 E8(00000000)                call __fast_memcpy
   162 000000EA C9                          leave
   163 000000EB 83F801                      cmp eax,1
   164 000000EE 0F859A000000                jne .halteo  
   165                                  
   166                                      ;Copy Kernel
   167 000000F4 55                          push ebp
   168 000000F5 89E5                        mov ebp,esp
   169 000000F7 68[00000000]                push __codigo_kernel32_size; 
   170 000000FC 68[00000000]                push __KERNEL_32_PHY
   171 00000101 68[00000000]                push __KERNEL_32_LMA;
   172 00000106 E8(00000000)                call __fast_memcpy
   173 0000010B C9                          leave
   174 0000010C 83F801                      cmp eax,1
   175 0000010F 757D                        jne .halteo
   176                                  
   177                                      ;ISR & KEYBOARD Codes
   178 00000111 55                          push ebp
   179 00000112 89E5                        mov ebp,esp
   180 00000114 68[00000000]                push __ISR_AND_KEYBOARD_CODE_size; 
   181 00000119 68[00000000]                push __ISR_AND_KEYBOARD_PHY
   182 0000011E 68[00000000]                push __ISR_AND_KEYBOARD_LMA;_
   183 00000123 E8(00000000)                call __fast_memcpy
   184 00000128 C9                          leave
   185 00000129 83F801                      cmp eax,1
   186 0000012C 7560                        jne .halteo
   187                                  
   188 0000012E 55                          push ebp
   189 0000012F 89E5                        mov ebp,esp
   190 00000131 68[00000000]                push  __sys_tables_size; 
   191 00000136 68[00000000]                push __SYS_TABLES_GDT
   192 0000013B 68[00000000]                push __SYS_TABLES_LMA ;
   193 00000140 E8(00000000)                call __fast_memcpy
   194 00000145 C9                          leave
   195 00000146 83F801                      cmp eax,1
   196 00000149 7543                        jne .halteo
   197                                   
   198 0000014B E8(00000000)                call init_pic ; PIC Init
   199 00000150 E8(00000000)                call init_IDT;  IDT Init
   200                                  
   201 00000155 B800000000                  mov eax, 0        ;Little Video Init
   202 0000015A A3[00000000]                mov [Digit_Table_Average], eax
   203 0000015F B800800B00                  mov eax, VIDEO_BUFFER_ADDR
   204 00000164 A3[00000000]                mov [Screen_pointer],eax    
   205                                      ;Here I Should start setting CR3 & CR0.PG (Bit 31)
   206                                  
   207                                  
   208 00000169 0F011D[00000000]            lidt[_idtr] ;Load IDT
   209 00000170 0F0115[06000000]            lgdt [_gdtr];Load GDT
   210                                  
   211 00000177 E8(00000000)                call go_paging; Let's do it!
   212                                  
   213                                      ; Paging turn on
   214 0000017C 0F20C0                      mov   eax, cr0 
   215 0000017F 0D00000080                  or    eax, X86_CR0_PG
   216 00000184 0F22C0                      mov   cr0, eax  
   217                                  
   218 00000187 EA[00000000][0000]          jmp CS_SEL_32:kernel32_init
   219                                  
   220                                  
   221                                  .halteo
   221          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   222 0000018E F4                          hlt
   223 0000018F EBFD                        jmp .halteo
