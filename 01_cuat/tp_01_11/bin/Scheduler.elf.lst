     1                                  GLOBAL Basic_Scheduler ;
     2                                  EXTERN TASK1_COUNTER 
     3                                  EXTERN TASK2_COUNTER 
     4                                  EXTERN TASK3_COUNTER 
     5                                  EXTERN TASK4_COUNTER 
     6                                  EXTERN TIMER_COUNTER
     7                                  EXTERN SCH_NEXT_TASK
     8                                  EXTERN SCH_ACTUAL_TASK
     9                                  EXTERN TSS_TO_LOAD 
    10                                  EXTERN CR3_TO_LOAD
    11                                  EXTERN Timer_fin
    12                                  EXTERN First_time_Flag
    13                                  EXTERN __TSS_KERNEL
    14                                  EXTERN __TSS_TASK1
    15                                  EXTERN __CR3_TASK1
    16                                  EXTERN __TSS_TASK2
    17                                  EXTERN __CR3_TASK2
    18                                  EXTERN __TSS_TASK3
    19                                  EXTERN __CR3_TASK3
    20                                  EXTERN __TSS_TASK4
    21                                  EXTERN __CR3_TASK4
    22                                  EXTERN NEW_STACK
    23                                  
    24                                  TASK1 EQU 1
    25                                  TASK2 EQU 2
    26                                  TASK3 EQU 3
    27                                  TASK4 EQU 4
    28                                  CYCLE EQU 21
    29                                  
    30                                  __100mS EQU 10
    31                                  __200mS EQU 20
    32                                  __500mS EQU 50
    33                                  
    34                                  section .ISR_AND_KEYBOARD
    35                                  
    36                                  Basic_Scheduler:
    37 00000000 60                          PUSHAD
    38                                      
    39 00000001 A1[00000000]                mov eax,[First_time_Flag]
    40 00000006 83F800                      cmp eax,0                   
    41 00000009 772C                        ja Not_first             
    42                                  
    43                                   first_entry:
    44 0000000B 31C0                        xor eax, eax
    45 0000000D 40                          inc eax
    46 0000000E A3[00000000]                mov [First_time_Flag],eax   
    47                                  
    48 00000013 61                          POPAD
    49                                      ;
    50 00000014 C605[00000000]04            mov byte [SCH_ACTUAL_TASK], TASK4             ;Set a task as actual task (Idle task)
    51                                  
    52 0000001B B8[00000000]                mov eax, __TSS_TASK4
    53 00000020 A3[00000000]                mov [TSS_TO_LOAD], eax
    54 00000025 B8[00000000]                mov eax, __CR3_TASK4
    55 0000002A A3[00000000]                mov [CR3_TO_LOAD], eax      
    56 0000002F 0F22D8                      mov cr3,eax
    57                                  
    58 00000032 E982000000                  jmp LOAD_CONTEXT ; Only first time
    59                                  
    60                                  Not_first:
    61                                      ;;
    62 00000037 FE05[00000000]              inc byte [TASK1_COUNTER]
    63 0000003D FE05[00000000]              inc byte [TASK2_COUNTER]
    64 00000043 FE05[00000000]              inc byte [TASK3_COUNTER]        
    65                                     
    66                                  
    67 00000049 803D[00000000]0A            cmp byte [TASK1_COUNTER], __100mS
    68 00000050 7322                        jae _100mS_label
    69                                  
    70 00000052 803D[00000000]14            cmp byte [TASK2_COUNTER], __200mS
    71 00000059 7329                        jae _200mS_label
    72                                  
    73 0000005B 803D[00000000]32            cmp byte [TASK3_COUNTER], __500mS
    74 00000062 7330                        jae _500mS_label  
    75                                  
    76 00000064 C605[00000000]04            mov byte [SCH_ACTUAL_TASK], TASK4 ; If no flag got on, I shoudl execute the Idle Task
    77 0000006B C605[00000000]04            mov byte [SCH_NEXT_TASK], TASK4   ; So TASK4 is ACTUAL and NEXT task to execute
    78 00000072 EB30                        jmp ActualVsNext
    79                                  
    80                                  _100mS_label: ;Exec TASK1
    81 00000074 C605[00000000]01            mov byte [SCH_NEXT_TASK], TASK1
    82 0000007B C605[00000000]00            mov byte[TASK1_COUNTER], 0
    83 00000082 EB20                        jmp ActualVsNext
    84                                  
    85                                  _200mS_label: ;Exec TASK2
    86                                      ;xchg bx,bx
    87 00000084 C605[00000000]02            mov byte [SCH_NEXT_TASK], TASK2
    88 0000008B C605[00000000]00            mov byte[TASK2_COUNTER], 0
    89 00000092 EB10                        jmp ActualVsNext        
    90                                  
    91                                  _500mS_label: ;Exec TASK3
    92                                      ;xchg bx, bx
    93 00000094 C605[00000000]03            mov byte [SCH_NEXT_TASK], TASK3
    94 0000009B C605[00000000]00            mov byte[TASK3_COUNTER], 0 
    95                                    
    96 000000A2 EB00                        jmp ActualVsNext        
    97                                  
    98                                  
    99                                  ActualVsNext:
   100                                  
   101 000000A4 31C0                        xor eax, eax
   102 000000A6 31DB                        xor ebx, ebx
   103 000000A8 A0[00000000]                mov al, byte[SCH_ACTUAL_TASK]
   104 000000AD 8A1D[00000000]              mov bl, byte[SCH_NEXT_TASK]
   105 000000B3 38D8                        cmp al, bl
   106 000000B5 7465                        je sch_end_no_switch ; If i'm running the same task I'd run after, there's nothing to be done
   107 000000B7 7569                        jne sch_switch
   108                                  
   109                                   LOAD_CONTEXT:                 
   110                                      
   111                                      ;Cargo los registros de segmento
   112 000000B9 A1[00000000]                mov eax, [TSS_TO_LOAD]     ; es
   113 000000BE 8E4048                      mov es, [eax  + 0x48 ] 
   114 000000C1 8E5854                      mov ds, [eax  + 0x54]
   115 000000C4 8E6058                      mov fs, [eax  + 0x58]
   116 000000C7 8E685C                      mov gs, [eax  + 0x5C]
   117 000000CA 8B683C                      mov ebp, [eax + 0x3C]
   118                                  
   119                                      ;Stack
   120 000000CD 8B5804                      mov ebx, [eax  + 0x04]
   121 000000D0 891D[00000000]              mov [NEW_STACK], ebx
   122 000000D6 8B5808                      mov ebx, [eax  + 0x08] ;SS0
   123 000000D9 891D[04000000]              mov [NEW_STACK +4], ebx
   124                                  
   125                                      ;LSS --> load stack segment
   126 000000DF 0FB225[00000000]            lss esp, [NEW_STACK]
   127                                      ;cargo el stack 
   128                                  
   129 000000E6 8B5818                      mov ebx,  [eax + 0x18 ] ; SS2
   130 000000E9 53                          push ebx
   131 000000EA 8B5814                      mov ebx,  [eax + 0x14 ] ; ESP2
   132 000000ED 53                          push ebx
   133 000000EE 8B5824                      mov ebx,  [eax + 0x24 ] ; EFLGAS
   134 000000F1 53                          push ebx  
   135 000000F2 8B584C                      mov ebx,  [eax + 0x4C ] ; CS
   136 000000F5 53                          push ebx 
   137 000000F6 8B5820                      mov ebx,  [eax + 0x20 ] ; EIP
   138 000000F9 53                          push ebx   
   139                                   
   140                                      ;Registros de Proposito general
   141 000000FA 8B482C                      mov ecx, [eax + 0x2C]
   142 000000FD 8B5030                      mov edx, [eax + 0x30]
   143 00000100 8B5834                      mov ebx, [eax + 0x34]       
   144 00000103 8B7040                      mov esi, [eax + 0x40]
   145 00000106 8B7844                      mov edi, [eax + 0x44]
   146 00000109 8B4028                      mov eax, [eax + 0x28]    
   147                                  
   148                                      ;LOAD TSS INSTANCE
   149                                  
   150 0000010C FF35[00000000]              push dword[TSS_TO_LOAD]
   151 00000112 E84F010000                  call LOAD_DYN_TSS
   152 00000117 83C404                      add esp,4
   153 0000011A EB01                        jmp sch_end
   154                                  
   155                                  
   156                                  sch_end_no_switch:
   157 0000011C 61                          POPAD ; If no switch've been done, it's mandatory to POPAD reg.purp.
   158                                  sch_end:
   159                                      
   160                                      ;POPAD
   161 0000011D E9(00000000)                jmp Timer_fin        
   162                                  
   163                                  
   164                                  
   165                                  sch_switch: ;Not first time
   166                                  ;Save actual context. Get the Next Task Context
   167                                      ;;
   168                                      ;;
   169 00000122 803D[00000000]01            cmp byte [SCH_ACTUAL_TASK], TASK1 
   170 00000129 741B                        je SAVE_TASK1_CONTEXT
   171                                  
   172 0000012B 803D[00000000]02            cmp byte [SCH_ACTUAL_TASK], TASK2 
   173 00000132 741E                        je SAVE_TASK2_CONTEXT
   174                                  
   175 00000134 803D[00000000]03            cmp byte [SCH_ACTUAL_TASK], TASK3 
   176 0000013B 7421                        je SAVE_TASK3_CONTEXT
   177                                  
   178 0000013D 803D[00000000]04            cmp byte [SCH_ACTUAL_TASK], TASK4 
   179 00000144 7424                        je SAVE_TASK4_CONTEXT    
   180                                  
   181                                  
   182                                  SAVE_TASK1_CONTEXT:
   183                                      ;;
   184 00000146 B8[00000000]                mov eax, __TSS_TASK1
   185 0000014B A3[00000000]                mov [TSS_TO_LOAD], eax
   186 00000150 EB24                        jmp SAVE_CONTEXT
   187                                  SAVE_TASK2_CONTEXT:
   188                                      ;;
   189 00000152 B8[00000000]                mov eax, __TSS_TASK2
   190 00000157 A3[00000000]                mov [TSS_TO_LOAD], eax
   191 0000015C EB18                        jmp SAVE_CONTEXT
   192                                  SAVE_TASK3_CONTEXT:
   193                                      ;;
   194 0000015E B8[00000000]                mov eax, __TSS_TASK3
   195 00000163 A3[00000000]                mov [TSS_TO_LOAD], eax    
   196 00000168 EB0C                        jmp SAVE_CONTEXT
   197                                  SAVE_TASK4_CONTEXT:
   198                                      ;;
   199 0000016A B8[00000000]                mov eax, __TSS_TASK4
   200 0000016F A3[00000000]                mov [TSS_TO_LOAD], eax    
   201 00000174 EB00                        jmp SAVE_CONTEXT    
   202                                  
   203                                   SAVE_CONTEXT:
   204                                  
   205                                   ;https://i.stack.imgur.com/KioUB.png
   206 00000176 61                          POPAD
   207                                      
   208 00000177 891D[00000000]              mov [TSS_TO_LOAD + 0], ebx      
   209 0000017D 890D[04000000]              mov [TSS_TO_LOAD + 4], ecx      
   210 00000183 8915[08000000]              mov [TSS_TO_LOAD + 8], edx      
   211 00000189 5B                          pop ebx
   212 0000018A 891D[0C000000]              mov [TSS_TO_LOAD + 12], ebx     
   213 00000190 8935[10000000]              mov [TSS_TO_LOAD + 16], esi     
   214 00000196 893D[14000000]              mov [TSS_TO_LOAD + 20], edi     
   215 0000019C 892D[18000000]              mov [TSS_TO_LOAD + 24], ebp     
   216 000001A2 89E3                        mov ebx, esp
   217 000001A4 891D[1C000000]              mov [TSS_TO_LOAD + 28], ebx     
   218 000001AA 0F20DB                      mov ebx, cr3    
   219 000001AD 891D[34000000]              mov [TSS_TO_LOAD + 52], ebx     
   220 000001B3 8B5C2404                    mov ebx,[esp+4]
   221 000001B7 891D[38000000]              mov [TSS_TO_LOAD + 56], ebx     
   222 000001BD 8B1C24                      mov ebx,[esp]
   223 000001C0 891D[44000000]              mov [TSS_TO_LOAD + 68], ebx     
   224 000001C6 8B5C2408                    mov ebx,[esp+8]
   225 000001CA 891D[48000000]              mov [TSS_TO_LOAD + 72], ebx     
   226                                  
   227                                  WHAT_TASK_NEXT: ;I'll never jump here
   228                                  
   229 000001D0 803D[00000000]01            cmp byte [SCH_NEXT_TASK], TASK1 
   230 000001D7 741D                        je LOAD_TASK1_CONTEXT
   231                                  
   232 000001D9 803D[00000000]02            cmp byte [SCH_NEXT_TASK], TASK2 
   233 000001E0 7430                        je LOAD_TASK2_CONTEXT
   234                                  
   235 000001E2 803D[00000000]03            cmp byte [SCH_NEXT_TASK], TASK3 
   236 000001E9 7443                        je LOAD_TASK3_CONTEXT
   237                                  
   238 000001EB 803D[00000000]04            cmp byte [SCH_NEXT_TASK], TASK4 
   239 000001F2 7456                        je LOAD_TASK4_CONTEXT
   240 000001F4 EB54                        jmp LOAD_TASK4_CONTEXT ;Default value    
   241                                  
   242                                                    
   243                                  LOAD_TASK1_CONTEXT:
   244 000001F6 B8[00000000]                mov eax, __TSS_TASK1
   245 000001FB A3[00000000]                mov [TSS_TO_LOAD], eax
   246 00000200 B8[00000000]                mov eax, __CR3_TASK1
   247 00000205 A3[00000000]                mov [CR3_TO_LOAD], eax      
   248 0000020A 0F22D8                      mov cr3,eax
   249 0000020D E9A7FEFFFF                  jmp LOAD_CONTEXT
   250                                  
   251                                  LOAD_TASK2_CONTEXT:
   252 00000212 B8[00000000]                mov eax, __TSS_TASK2
   253 00000217 A3[00000000]                mov [TSS_TO_LOAD], eax
   254 0000021C B8[00000000]                mov eax, __CR3_TASK2
   255 00000221 A3[00000000]                mov [CR3_TO_LOAD], eax      
   256 00000226 0F22D8                      mov cr3,eax
   257 00000229 E98BFEFFFF                  jmp LOAD_CONTEXT
   258                                  
   259                                  LOAD_TASK3_CONTEXT:                        
   260 0000022E B8[00000000]                mov eax, __TSS_TASK3
   261 00000233 A3[00000000]                mov [TSS_TO_LOAD], eax
   262 00000238 B8[00000000]                mov eax, __CR3_TASK3
   263 0000023D A3[00000000]                mov [CR3_TO_LOAD], eax      
   264 00000242 0F22D8                      mov cr3,eax
   265 00000245 E96FFEFFFF                  jmp LOAD_CONTEXT
   266                                  
   267                                  LOAD_TASK4_CONTEXT:
   268 0000024A B8[00000000]                mov eax, __TSS_TASK4
   269 0000024F A3[00000000]                mov [TSS_TO_LOAD], eax
   270 00000254 B8[00000000]                mov eax, __CR3_TASK4
   271 00000259 A3[00000000]                mov [CR3_TO_LOAD], eax      
   272 0000025E 0F22D8                      mov cr3,eax
   273 00000261 E953FEFFFF                  jmp LOAD_CONTEXT  
   274                                  
   275                                  
   276                                  
   277                                  LOAD_DYN_TSS:
   278 00000266 8B5C2404                    mov ebx, [esp + 4] ; Back from push
   279 0000026A 8B03                        mov eax, [ebx]
   280 0000026C A3[00000000]                mov [__TSS_KERNEL], eax    ;Previous task link
   281 00000271 8B4304                      mov eax, [ebx+0x04]
   282 00000274 A3[04000000]                mov [__TSS_KERNEL+0x04], eax   ;ESP0
   283 00000279 8B4308                      mov eax, [ebx+0x08]
   284 0000027C A3[08000000]                mov [__TSS_KERNEL+0x08], eax ;SS0 
   285 00000281 8B430C                      mov eax, [ebx+0x0C]
   286 00000284 A3[0C000000]                mov [__TSS_KERNEL+0x0C], eax ;ESP1
   287 00000289 8B4310                      mov eax, [ebx+0x10]
   288 0000028C A3[10000000]                mov [__TSS_KERNEL+0x10], eax  ;SS1 
   289 00000291 8B4314                      mov eax, [ebx+0x14]
   290 00000294 A3[14000000]                mov [__TSS_KERNEL+0x14], eax  ;ESP
   291 00000299 8B4318                      mov eax, [ebx+0x18]
   292 0000029C A3[18000000]                mov [__TSS_KERNEL+0x18], eax     ;SS2
   293 000002A1 8B431C                      mov eax, [ebx+0x1C]
   294 000002A4 A3[1C000000]                mov [__TSS_KERNEL+0x1C], eax    ;CR3
   295 000002A9 8B4320                      mov eax, [ebx+0x20]
   296 000002AC A3[20000000]                mov [__TSS_KERNEL+0x20], eax     ;EIP
   297 000002B1 8B4324                      mov eax, [ebx+0x24]
   298 000002B4 A3[24000000]                mov [__TSS_KERNEL+0x24], eax     ;EFLAGS
   299 000002B9 8B4328                      mov eax, [ebx+0x28]
   300 000002BC A3[28000000]                mov [__TSS_KERNEL+0x28], eax     ;EAX
   301 000002C1 8B432C                      mov eax, [ebx+0x2C]
   302 000002C4 A3[2C000000]                mov [__TSS_KERNEL+0x2C], eax     ;ECX
   303 000002C9 8B4330                      mov eax, [ebx+0x30]
   304 000002CC A3[30000000]                mov [__TSS_KERNEL+0x30], eax     ;EDX
   305 000002D1 8B4334                      mov eax, [ebx+0x34]
   306 000002D4 A3[34000000]                mov [__TSS_KERNEL+0x34], eax     ;EBX
   307 000002D9 8B4338                      mov eax, [ebx+0x38]
   308 000002DC A3[38000000]                mov [__TSS_KERNEL+0x38], eax    ;ESP
   309 000002E1 8B433C                      mov eax, [ebx+0x3C]
   310 000002E4 A3[3C000000]                mov [__TSS_KERNEL+0x3C], eax     ;EBP
   311 000002E9 8B4340                      mov eax, [ebx+0x40]
   312 000002EC A3[40000000]                mov [__TSS_KERNEL+0x40], eax     ;ESI
   313 000002F1 8B4344                      mov eax, [ebx+0x44]
   314 000002F4 A3[44000000]                mov [__TSS_KERNEL+0x44], eax     ;EDI
   315 000002F9 8B4348                      mov eax, [ebx+0x48]
   316 000002FC A3[48000000]                mov [__TSS_KERNEL+0x48], eax     ;ES
   317 00000301 8B434C                      mov eax, [ebx+0x4C]
   318 00000304 A3[4C000000]                mov [__TSS_KERNEL+0x4C], eax     ;CS
   319 00000309 8B4350                      mov eax, [ebx+0x50]
   320 0000030C A3[50000000]                mov [__TSS_KERNEL+0x50], eax     ;SS
   321 00000311 8B4354                      mov eax, [ebx+0x54]
   322 00000314 A3[54000000]                mov [__TSS_KERNEL+0x54], eax     ;DS
   323 00000319 8B4358                      mov eax, [ebx+0x58]
   324 0000031C A3[58000000]                mov [__TSS_KERNEL+0x58], eax     ;FS
   325 00000321 8B435C                      mov eax, [ebx+0x5C]
   326 00000324 A3[5C000000]                mov [__TSS_KERNEL+0x5C], eax     ;GS
   327 00000329 8B4360                      mov eax, [ebx+0x60]
   328 0000032C A3[60000000]                mov [__TSS_KERNEL+0x60], eax     ;LDTR
   329 00000331 8B4364                      mov eax, [ebx+0x64]
   330 00000334 A3[64000000]                mov [__TSS_KERNEL+0x64], eax     ;Bitmap E/S
   331                                  
   332 00000339 C3                          ret
